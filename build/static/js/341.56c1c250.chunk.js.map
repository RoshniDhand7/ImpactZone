{"version":3,"file":"static/js/341.56c1c250.chunk.js","mappings":"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","sources":["views/Settings/Inventory/ProfitCenter/ProfitCenterForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addProfitCenters, editProfitCenters, getProfitCenter } from '../../../../redux/actions/InventorySettings/profitCenterAction';\r\n\r\nconst ProfitCenterForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    const { profitCenterDropdown } = useSelector((state) => state.profitCenter);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getProfitCenter(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        glCode: data.glCode,\r\n                        availableProfitCenter: data.availableProfitCenter,\r\n                        parentProfitCenter: data.parentProfitCenter,\r\n                        description: data.description,\r\n                        profitCenterCode: data.profitCenterCode,\r\n                        earningsCode: data.earningsCode,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        glCode: '',\r\n        availableProfitCenter: '',\r\n        parentProfitCenter: '',\r\n        description: '',\r\n        profitCenterCode: '',\r\n        earningsCode: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editProfitCenters(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addProfitCenters(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Profit Center\">\r\n            <CustomCard col=\"12\" title=\"General\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"glCode\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"availableProfitCenter\" options={profitCenterDropdown} data={data} optionLabel=\"name\" onChange={handleChange} />\r\n                    <CustomDropDown name=\"parentProfitCenter\" options={profitCenterDropdown} data={data} onChange={handleChange} optionLabel=\"name\" />\r\n                    <CustomTextArea name=\"description\" maxLength=\"266\" data={data} onChange={handleChange} />\r\n\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Catalog Items\">\r\n                <CustomGridLayout></CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Data Export\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"profitCenterCode\" data={data} onChange={handleChange} />\r\n                    <CustomInput name=\"earningsCode\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default ProfitCenterForm;\r\n"],"names":["ProfitCenterForm","history","useHistory","id","useParams","dispatch","useDispatch","loading","setLoading","useState","profitCenterDropdown","useSelector","state","profitCenter","useEffect","getProfitCenter","data","setData","name","glCode","availableProfitCenter","parentProfitCenter","description","profitCenterCode","earningsCode","isActive","handleChange","_ref","value","formErrors","formValidation","prev","_jsxs","FormPage","backText","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","optionLabel","CustomTextArea","maxLength","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editProfitCenters","addProfitCenters","LightButton","goBack"],"sourceRoot":""}