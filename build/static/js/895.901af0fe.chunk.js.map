{"version":3,"file":"static/js/895.901af0fe.chunk.js","mappings":"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","sources":["views/Settings/ScheduleSetup/EventClasses/EventClassesForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    CustomCalenderInput,\r\n    CustomCheckbox,\r\n    CustomDropDown,\r\n    CustomInputNumber,\r\n    CustomInputSwitch,\r\n    CustomMultiselect,\r\n} from '../../../../shared/Input/AllInputs';\r\nimport { WeekDaysOption, classMeet } from '../../../../utils/dropdownConstants';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { getEvents, getServicesEvents } from '../../../../redux/actions/Settings/ScheduleSetup/eventsActions';\r\nimport { convertToDateTime, showArrayFormErrors, showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { types } from '../../../../redux/types/types';\r\nimport { getLocations } from '../../../../redux/actions/Settings/ScheduleSetup/locationsActions';\r\nimport { addClasses, editClasses, getEventClass } from '../../../../redux/actions/Settings/ScheduleSetup/eventClassesAction';\r\nimport { getEmployeePay, getEmployees } from '../../../../redux/actions/Settings/Employee/employeesAction';\r\nimport moment from 'moment';\r\n\r\nconst EventClassesForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { id } = useParams();\r\n    const { employees, employeePayType } = useSelector((state) => state.settings.employee);\r\n\r\n    const [data, setData] = useState({\r\n        event: '',\r\n        classMeet: 'ONE_TIME',\r\n        classLocation: '',\r\n        startDate: new Date(),\r\n        endDate: '',\r\n        schedule: [\r\n            {\r\n                days: [],\r\n                startTime: '',\r\n                duration: '',\r\n                endTime: '',\r\n            },\r\n        ],\r\n        instructor: [\r\n            {\r\n                assistant: null,\r\n                assistantPay: '',\r\n            },\r\n        ],\r\n        staff: null,\r\n        payType: '',\r\n        totalCapacity: null,\r\n        waitlistPeople: null,\r\n        clientSignupClass: false,\r\n        onlineCapacity: null,\r\n        clientPaylater: false,\r\n        clientClassFree: false,\r\n        isActive: true,\r\n    });\r\n    useEffect(() => {\r\n        dispatch(getLocations());\r\n        dispatch(getEvents());\r\n        dispatch(getEmployees());\r\n    }, [dispatch]);\r\n    const { locationDropdown } = useSelector((state) => state.settings.schedule);\r\n    const { eventClassesDropDown } = useSelector((state) => state.settings.schedule);\r\n\r\n    let { eventClasses } = useSelector((state) => state.settings.schedule);\r\n    eventClasses = eventClasses?.find((item) => item._id === data?.event);\r\n    const history = useHistory();\r\n\r\n    const durationOptions = eventClasses?.duration?.map((item) => ({ name: `${item} minutes`, value: item }));\r\n\r\n    useEffect(() => {\r\n        if (data?.event) {\r\n            setData((prev) => ({ ...prev, totalCapacity: eventClasses?.defaultMaxAttendes, waitlistPeople: eventClasses?.maximumWaitlist }));\r\n        }\r\n    }, [data?.event, eventClasses]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getEventClass(id, (data) => {\r\n                    if (data?.staff) {\r\n                        dispatch(getEmployeePay(data?.staff));\r\n                    }\r\n                    setData({\r\n                        event: data.event,\r\n                        classMeet: data.classMeet,\r\n                        classLocation: data.classLocation,\r\n                        startDate: new Date(data.startDate),\r\n                        endDate: new Date(data.endDate),\r\n                        schedule: data.schedule?.map((item) => ({\r\n                            ...item,\r\n                            startTime: convertToDateTime(item.startTime),\r\n                            endTime: item.endTime ? convertToDateTime(item.endTime) : null,\r\n                        })),\r\n                        instructor: data.instructor,\r\n                        staff: data.staff ? data?.staff : null,\r\n                        payType: data.pay,\r\n                        totalCapacity: data.totalCapacity ? data.totalCapacity : eventClasses?.defaultMaxAttendes,\r\n                        waitlistPeople: data.waitlistPeople ? data.waitlistPeople : eventClasses?.maximumWaitlist,\r\n                        clientSignupClass: data.clientSignupClass,\r\n                        onlineCapacity: data.onlineCapacity,\r\n                        clientPaylater: data.clientPaylater,\r\n                        clientClassFree: data.clientClassFree,\r\n                        isActive: data.isActive,\r\n                    });\r\n                    if (data.instructor && data.instructor.length > 0) {\r\n                        for (const instructorItem of data.instructor) {\r\n                            fetchAssistantPayOptions(instructorItem.assistant);\r\n                        }\r\n                    }\r\n                }),\r\n            );\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [id, dispatch, employees]);\r\n\r\n    const fetchAssistantPayOptions = async (assistantId) => {\r\n        const employeeWithLevel = employees.find((employee) => employee._id === assistantId);\r\n        if (employeeWithLevel) {\r\n            const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n            const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n            const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n\r\n            setData((prev) => ({\r\n                ...prev,\r\n                instructor: prev.instructor.map((inst) =>\r\n                    inst.assistant === assistantId\r\n                        ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : inst.assistantPay }\r\n                        : inst,\r\n                ),\r\n            }));\r\n        }\r\n    };\r\n\r\n    const loading = useSelector((state) => state?.loader?.isLoading);\r\n    const handleChange = ({ name, value }) => {\r\n        if (name === 'classMeet') {\r\n            setData((prevState) => {\r\n                const updatedSchedule = prevState.schedule.map((item) => {\r\n                    if (value === 'ONE_TIME') {\r\n                        return { ...item, days: [] };\r\n                    }\r\n                    return item;\r\n                });\r\n\r\n                return {\r\n                    ...prevState,\r\n                    classMeet: value,\r\n                    schedule: updatedSchedule,\r\n                };\r\n            });\r\n        } else {\r\n            const formErrors = formValidation(name, value, data);\r\n            setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data?.classMeet === 'ONE_TIME') {\r\n            setData((prev) => ({ ...prev, endDate: data?.startDate }));\r\n        }\r\n    }, [data?.classMeet, data?.startDate]);\r\n\r\n    useEffect(() => {\r\n        if (data?.event) {\r\n            dispatch(getServicesEvents(data?.event));\r\n            setData((prev) => ({\r\n                ...prev,\r\n                payType: '',\r\n                instructor: [\r\n                    {\r\n                        assistant: null,\r\n                        assistantPay: '',\r\n                    },\r\n                ],\r\n            }));\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [data?.event]);\r\n\r\n    const handleAddSchedule = () => {\r\n        const newSchedule = {\r\n            days: [],\r\n            startTime: '',\r\n            timeFormat: '',\r\n            duration: '',\r\n            endTime: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            schedule: [...prevData.schedule, newSchedule],\r\n        }));\r\n    };\r\n    const handleAddAssistant = () => {\r\n        const newAssistant = {\r\n            assistant: '',\r\n            assistantPay: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            instructor: [...prevData.instructor, newAssistant],\r\n        }));\r\n    };\r\n    const { servicesEvents } = useSelector((state) => state.settings.schedule);\r\n\r\n    const eventLevels = servicesEvents && servicesEvents?.EventService?.map((item) => item.eventLevel?._id);\r\n\r\n    const employeesWithLevel = employees\r\n        .filter((employee) => {\r\n            return employee.isClassLevel.some((classData) => eventLevels?.includes(classData));\r\n        })\r\n        ?.map((it) => ({ name: it.firstName, value: it._id }));\r\n\r\n    useEffect(() => {\r\n        if (data?.staff) {\r\n            dispatch(getEmployeePay(data?.staff));\r\n        }\r\n        return () => {\r\n            dispatch({\r\n                type: types.CHANGE_EMPLOYEES_PAY_TYPE,\r\n                payload: [],\r\n            });\r\n        };\r\n    }, [data?.staff, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (employeePayType) {\r\n            let defaultPay = employeePayType?.employeeClassData?.find((item) => item.isDefaultPay);\r\n            setData((prev) => ({ ...prev, payType: defaultPay ? defaultPay.payType : null }));\r\n        }\r\n    }, [employeePayType, employees]);\r\n\r\n    const handleChangeDynamicField = async ({ name, value, customIndex, fieldName }) => {\r\n        const _newData = { ...data };\r\n        let obj = _newData[fieldName][customIndex];\r\n        obj[name] = value;\r\n\r\n        if (name === 'assistant') {\r\n            _newData[fieldName][customIndex] = obj;\r\n            setData(() => ({\r\n                ..._newData,\r\n            }));\r\n            await dispatch(getEmployeePay(value));\r\n        }\r\n        if (name === 'duration') {\r\n            const startTime = obj?.startTime;\r\n            if (startTime && value) {\r\n                const endTime = new Date(moment(startTime).add(value, 'minutes'));\r\n                obj.endTime = endTime;\r\n                obj.duration = value;\r\n            } else {\r\n                obj.endTime = null;\r\n                obj.duration = null;\r\n            }\r\n        }\r\n\r\n        if (name === 'startTime') {\r\n            const startTime = value;\r\n            const duration = obj?.duration;\r\n\r\n            if (startTime && duration) {\r\n                const endTime = new Date(moment(startTime).add(duration, 'minutes'));\r\n                obj.startTime = startTime;\r\n                obj.endTime = endTime;\r\n            } else if (startTime && !duration) {\r\n                obj.startTime = startTime;\r\n                obj.endTime = null;\r\n                obj.duration = null;\r\n            } else {\r\n                obj.endTime = null;\r\n                obj.duration = null;\r\n            }\r\n        }\r\n\r\n        const formErrors = formValidation(name, value, obj);\r\n        obj.formErrors = formErrors;\r\n        _newData[fieldName][customIndex] = obj;\r\n        setData(() => ({\r\n            ..._newData,\r\n        }));\r\n\r\n        if (name === 'assistant') {\r\n            const selectedAssistant = value;\r\n            const employeeWithLevel = employees.find((employee) => employee._id === selectedAssistant);\r\n\r\n            if (employeeWithLevel) {\r\n                const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n                const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n                const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n                setData((prev) => ({\r\n                    ...prev,\r\n                    instructor: prev.instructor.map((inst, idx) =>\r\n                        idx === customIndex\r\n                            ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : null }\r\n                            : inst,\r\n                    ),\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    // const handleChangeDynamicField = ({ name, value, customIndex, fieldName }) => {\r\n    //     const _newData = { ...data };\r\n    //     let obj = _newData[fieldName][customIndex];\r\n    //     obj[name] = value;\r\n    //     if (name === 'assistant') {\r\n    //         _newData[fieldName][customIndex] = obj;\r\n    //         setData(() => ({\r\n    //             ..._newData,\r\n    //         }));\r\n    //         dispatch(getEmployeePay(value));\r\n    //     }\r\n    //     const formErrors = formValidation(name, value, obj);\r\n    //     obj.formErrors = formErrors;\r\n    //     _newData[fieldName][customIndex] = obj;\r\n    //     setData(() => ({\r\n    //         ..._newData,\r\n    //     }));\r\n    // };\r\n\r\n    // const getAvailableOptions = (index) => {\r\n    //     const selectedDays = data.schedule?.flatMap((item, idx) => (idx !== index ? item.days : []));\r\n    //     return WeekDaysOption.filter((day) => !selectedDays.includes(day.value));\r\n    // };\r\n\r\n    const getPayOptions = () => {\r\n        let payType = employeePayType?.employeeClassData?.map((item) => ({ name: item.label, value: item.payType }));\r\n        const uniqueOptionsSet = new Set(payType?.map((option) => JSON.stringify(option)));\r\n        const uniqueOptions = Array.from(uniqueOptionsSet)?.map((optionString) => JSON.parse(optionString));\r\n        return uniqueOptions;\r\n    };\r\n    const getAssistantOptions = (index) => {\r\n        const existingAssistants = data.instructor.filter((_, idx) => idx !== index)?.flatMap((item) => item.assistant);\r\n        const optionsToExclude = [data.staff, ...existingAssistants];\r\n        return employeesWithLevel.filter((level) => !optionsToExclude.includes(level.value));\r\n    };\r\n\r\n    const handleRemove = (indexToRemove, fieldName) => {\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            [fieldName]: prevData[fieldName].filter((_, index) => index !== indexToRemove),\r\n        }));\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            let validatedSchedule = showArrayFormErrors(data.schedule, data?.classMeet === 'ONE_TIME' ? ['days'] : []);\r\n            console.log(validatedSchedule, 'validatedSchedule');\r\n            if (!validatedSchedule.isValid) {\r\n                setData((prev) => ({ ...prev, schedule: validatedSchedule.data }));\r\n            }\r\n            // const { schedule, ...rest } = data;\r\n\r\n            if (validatedSchedule.isValid) {\r\n                if (id) {\r\n                    dispatch(\r\n                        editClasses(\r\n                            id,\r\n                            { ...data, startDate: moment(data.startDate).format('YYYY-MM-DD'), endDate: moment(data.endDate).format('YYYY-MM-DD') },\r\n                            history,\r\n                        ),\r\n                    );\r\n                } else {\r\n                    dispatch(\r\n                        addClasses(\r\n                            { ...data, startDate: moment(data.startDate).format('YYYY-MM-DD'), endDate: moment(data.endDate).format('YYYY-MM-DD') },\r\n                            history,\r\n                        ),\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    };\r\n    console.log(data, 'data');\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Classes\">\r\n                <CustomCard title=\"When and Where\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"event\" label=\"Class Name\" options={eventClassesDropDown} onChange={handleChange} data={data} col={4} />\r\n                        <CustomDropDown name=\"classMeet\" label=\"How often does class meet?\" options={classMeet} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"classLocation\" options={locationDropdown} onChange={handleChange} data={data} />\r\n                        <CustomCalenderInput name=\"startDate\" onChange={handleChange} data={data} minDate={new Date()} />\r\n                        <CustomCalenderInput name=\"endDate\" onChange={handleChange} data={data} disabled={!data?.startDate || data?.classMeet === 'ONE_TIME'} />\r\n                        <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} extraClassName=\"text-right\" col={4} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add New Schedule\" className=\"mx-2 \" onClick={handleAddSchedule} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.schedule?.map((scheduleItem, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                <CustomCalenderInput\r\n                                    name=\"startTime\"\r\n                                    customIndex={index}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    timeOnly\r\n                                    placeholder=\"Select Time\"\r\n                                    hourFormat=\"12\"\r\n                                />\r\n                                <CustomDropDown\r\n                                    name=\"duration\"\r\n                                    customIndex={index}\r\n                                    options={durationOptions}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                />\r\n                                {data?.classMeet !== 'ONE_TIME' && (\r\n                                    <CustomMultiselect\r\n                                        name=\"days\"\r\n                                        customIndex={index}\r\n                                        onChange={handleChangeDynamicField}\r\n                                        data={scheduleItem}\r\n                                        options={WeekDaysOption}\r\n                                        fieldName=\"schedule\"\r\n                                        col={4}\r\n                                    />\r\n                                )}\r\n                                <CustomCalenderInput\r\n                                    name=\"endTime\"\r\n                                    customIndex={index}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    timeOnly\r\n                                    placeholder=\"Select Time\"\r\n                                    hourFormat=\"12\"\r\n                                    disabled={true}\r\n                                />\r\n                                {index > 0 && <i className=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'schedule')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Instructor\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"staff\" options={employeesWithLevel} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"payType\" options={getPayOptions()} onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add Assistant\" className=\"mx-2\" onClick={handleAddAssistant} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.instructor?.map((inst, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                <CustomDropDown\r\n                                    name=\"assistant\"\r\n                                    customIndex={index}\r\n                                    options={getAssistantOptions(index)}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                <CustomDropDown\r\n                                    name=\"assistantPay\"\r\n                                    customIndex={index}\r\n                                    options={inst.assistantPayOptions}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                {index > 0 && <i className=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'instructor')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Participants\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomInputNumber name=\"totalCapacity\" onChange={handleChange} data={data} />\r\n                        <CustomInputNumber name=\"waitlistPeople\" label=\"How many people can waitlist\" onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Online Scheduling\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox\r\n                            name=\"clientSignupClass\"\r\n                            label=\"Allow clients to sign up for this class online\"\r\n                            onChange={handleChange}\r\n                            data={data}\r\n                            col=\"12\"\r\n                        />\r\n                        <CustomInputNumber name=\"onlineCapacity\" label=\"Online Capacity\" onChange={handleChange} data={data} col=\"6\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Pricing\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox name=\"clientPaylater\" label=\"Allow clients to sign up now and pay later\" onChange={handleChange} data={data} col=\"12\" />\r\n                        <CustomCheckbox name=\"clientClassFree\" label=\"Clients can attend this class for free\" onChange={handleChange} data={data} col=\"12\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EventClassesForm;\r\n"],"names":["EventClassesForm","_eventClasses","_eventClasses2","_eventClasses2$durati","_servicesEvents$Event","_employees$filter","_data$schedule2","_data$instructor","dispatch","useDispatch","id","useParams","employees","employeePayType","useSelector","state","settings","employee","data","setData","useState","event","classMeet","classLocation","startDate","Date","endDate","schedule","days","startTime","duration","endTime","instructor","assistant","assistantPay","staff","payType","totalCapacity","waitlistPeople","clientSignupClass","onlineCapacity","clientPaylater","clientClassFree","isActive","useEffect","getLocations","getEvents","getEmployees","locationDropdown","eventClassesDropDown","eventClasses","find","item","_id","history","useHistory","durationOptions","map","name","concat","value","prev","_eventClasses3","_eventClasses4","_objectSpread","defaultMaxAttendes","maximumWaitlist","getEventClass","_data$schedule","_eventClasses5","_eventClasses6","getEmployeePay","convertToDateTime","pay","length","instructorItem","fetchAssistantPayOptions","async","employeeWithLevel","assistantId","_employeeWithLevel$em","uniquePayTypeOptions","employeeClassData","label","filter","option","index","self","findIndex","t","defaultPay","isDefaultPay","inst","assistantPayOptions","loading","_state$loader","loader","isLoading","handleChange","_ref","prevState","updatedSchedule","formErrors","formValidation","getServicesEvents","servicesEvents","eventLevels","EventService","_item$eventLevel","eventLevel","employeesWithLevel","isClassLevel","some","classData","includes","it","firstName","type","types","CHANGE_EMPLOYEES_PAY_TYPE","payload","_employeePayType$empl","handleChangeDynamicField","customIndex","fieldName","_ref2","_newData","obj","moment","add","selectedAssistant","_employeeWithLevel$em2","idx","getAssistantOptions","_data$instructor$filt","existingAssistants","_","flatMap","optionsToExclude","level","handleRemove","indexToRemove","prevData","console","log","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomCard","title","col","CustomGridLayout","CustomDropDown","options","onChange","CustomCalenderInput","minDate","disabled","CustomInputSwitch","extraClassName","extraClass","PrimaryButton","className","onClick","handleAddSchedule","newSchedule","timeFormat","scheduleItem","timeOnly","placeholder","hourFormat","CustomMultiselect","WeekDaysOption","getPayOptions","_employeePayType$empl2","_Array$from","uniqueOptionsSet","Set","JSON","stringify","Array","from","optionString","parse","handleAddAssistant","newAssistant","CustomInputNumber","CustomCheckbox","CustomButtonGroup","handleSave","showFormErrors","validatedSchedule","showArrayFormErrors","isValid","editClasses","format","addClasses","LightButton","goBack"],"sourceRoot":""}