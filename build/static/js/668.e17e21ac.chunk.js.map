{"version":3,"file":"static/js/668.e17e21ac.chunk.js","mappings":"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","sources":["shared/Tree/CustomTree.js","views/Settings/Employees/SecurityRoles/Permissions.jsx","views/Settings/Employees/SecurityRoles/SecurityRolesForm.jsx"],"sourcesContent":["import { Tree } from 'primereact/tree';\r\nimport React from 'react';\r\n\r\nconst CustomTree = ({ values, expandedKeys, selectionKeys, onSelectionChange }) => {\r\n    return (\r\n        <Tree\r\n            selectionMode=\"checkbox\"\r\n            value={values}\r\n            expandedKeys={expandedKeys}\r\n            selectionKeys={selectionKeys}\r\n            onSelectionChange={(e) => onSelectionChange(e.value)}\r\n        />\r\n    );\r\n};\r\nexport default CustomTree;\r\n","import React from 'react';\r\nimport CustomTree from '../../../../shared/Tree/CustomTree';\r\nimport { allPermissions } from '../../../../utils/permissions';\r\nimport CustomCard from '../../../../shared/Cards/CustomCard';\r\n\r\nexport default function Permissions({ selected, setSelected }) {\r\n    const renderPermissionTabs = () => {\r\n        return allPermissions.map(({ department, expended, permissions }, i) => (\r\n            <CustomCard key={i} col=\"4\" title={department}>\r\n                <CustomTree expandedKeys={expended} values={permissions} selectionKeys={selected} onSelectionChange={setSelected} />\r\n            </CustomCard>\r\n        ));\r\n    };\r\n    return (\r\n        <>\r\n            <h3 className=\"font-bold\">Permissions</h3>\r\n            <div className=\"grid\">{renderPermissionTabs()}</div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { CustomInput, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport Permissions from './Permissions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addSecurityRole, editSecurityRole, getPermissions, getSecurityRole } from '../../../../redux/actions/EmployeeSettings/securityRolesAction';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { showToast } from '../../../../redux/actions/toastAction';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport formValidation from '../../../../utils/validations';\r\n\r\nconst SecurityRolesForm = () => {\r\n    const { id } = useParams();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getSecurityRole(id, (data) => {\r\n                    setSelectedPermissions(data.rawPermissions);\r\n                    setData({\r\n                        name: data.name,\r\n                        description: data.description,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getPermissions());\r\n    }, [dispatch]);\r\n\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        description: '',\r\n    });\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [selectedPermissions, setSelectedPermissions] = useState({});\r\n    const handlePermissionSelection = (selections) => {\r\n        setSelectedPermissions(selections);\r\n    };\r\n\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (Object.keys(selectedPermissions).length) {\r\n                if (id) {\r\n                    dispatch(editSecurityRole(id, data, selectedPermissions, setLoading, history));\r\n                } else {\r\n                    dispatch(addSecurityRole(data, selectedPermissions, setLoading, history));\r\n                }\r\n            } else {\r\n                dispatch(\r\n                    showToast({\r\n                        severity: 'error',\r\n                        summary: 'Permission Matrix',\r\n                        detail: 'Select atleast one permission',\r\n                    }),\r\n                );\r\n            }\r\n        } else {\r\n            dispatch(\r\n                showToast({\r\n                    severity: 'error',\r\n                    summary: 'Personal Information',\r\n                    detail: 'Missing information',\r\n                }),\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Security Roles\">\r\n                <CustomCard col=\"12\" title=\"General\">\r\n                    <CustomGridLayout>\r\n                        <CustomInput data={data} name=\"name\" onChange={handleChange} required col={3} />\r\n                        <CustomTextArea data={data} onChange={handleChange} name=\"description\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n\r\n                <Permissions selected={selectedPermissions} setSelected={handlePermissionSelection} />\r\n\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" loading={loading} onClick={handleSave} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SecurityRolesForm;\r\n"],"names":["_ref","values","expandedKeys","selectionKeys","onSelectionChange","_jsx","Tree","selectionMode","value","e","Permissions","selected","setSelected","_jsxs","_Fragment","children","className","allPermissions","map","_ref2","i","department","expended","permissions","CustomCard","col","title","CustomTree","SecurityRolesForm","id","useParams","history","useHistory","dispatch","useDispatch","useEffect","getSecurityRole","data","setSelectedPermissions","rawPermissions","setData","name","description","getPermissions","useState","loading","setLoading","selectedPermissions","handleChange","formErrors","formValidation","prev","_objectSpread","FormPage","backText","CustomGridLayout","CustomInput","onChange","required","CustomTextArea","selections","CustomButtonGroup","PrimaryButton","label","onClick","handleSave","showFormErrors","Object","keys","length","editSecurityRole","addSecurityRole","showToast","severity","summary","detail","LightButton","goBack"],"sourceRoot":""}