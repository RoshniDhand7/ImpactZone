{"version":3,"file":"static/js/945.928641df.chunk.js","mappings":"8RAaA,MAmEA,EAnE4BA,KACxB,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,KACNF,GAASG,EAAAA,EAAAA,MAAY,GACtB,CAACH,IACJ,MAAOI,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAC7BC,KAAM,GACNC,UAAU,EACVC,MAAO,MAEXP,EAAAA,EAAAA,YAAU,KACFJ,GACAE,GACIU,EAAAA,EAAAA,IAAiBZ,GAAKM,IAClBC,EAAQ,CACJE,KAAMH,EAAKG,KACXC,SAAUJ,EAAKI,SACfC,MAAOL,EAAKK,OACd,IAGd,GACD,CAACX,EAAIE,IACR,MAAMW,GAAUC,EAAAA,EAAAA,MACVC,GAAUC,EAAAA,EAAAA,KAAaC,IAAK,IAAAC,EAAA,OAAU,OAALD,QAAK,IAALA,GAAa,QAARC,EAALD,EAAOE,cAAM,IAAAD,OAAR,EAALA,EAAeE,SAAS,KACzD,kBAAEC,IAAsBL,EAAAA,EAAAA,KAAaC,GAAe,OAALA,QAAK,IAALA,OAAK,EAALA,EAAON,QACtDW,EAAeC,IAAsB,IAArB,KAAEd,EAAI,MAAEe,GAAOD,EACjC,MAAME,GAAaC,EAAAA,EAAAA,GAAejB,EAAMe,EAAOlB,GAC/CC,GAASoB,IAAI,IAAWA,EAAM,CAAClB,GAAOe,EAAOC,gBAAc,EAa/D,OACIG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,SAAS,mBAAkBH,SAAA,EACjCC,EAAAA,EAAAA,MAACG,EAAAA,EAAgB,CAAAJ,SAAA,EACbF,EAAAA,EAAAA,KAACO,EAAAA,GAAW,CAAC1B,KAAK,OAAOH,KAAMA,EAAM8B,SAAUd,EAAce,UAAQ,KACrET,EAAAA,EAAAA,KAACU,EAAAA,GAAiB,CAAC7B,KAAK,WAAWH,KAAMA,EAAM8B,SAAUd,EAAciB,eAAe,mBAE1FX,EAAAA,EAAAA,KAACY,EAAAA,GAAU,CAACC,MAAM,mBAAmBC,IAAI,KAAIZ,UACzCF,EAAAA,EAAAA,KAACe,EAAAA,EAAc,CACXlC,KAAK,QACLmC,SAAc,OAAJtC,QAAI,IAAJA,OAAI,EAAJA,EAAMK,MAChBkC,WAAYxB,EACZyB,iBAAkBxB,EAClByB,oBAAoB,OAG5BhB,EAAAA,EAAAA,MAACiB,EAAAA,GAAiB,CAAAlB,SAAA,EACdF,EAAAA,EAAAA,KAACqB,EAAAA,GAAa,CAACC,MAAM,OAAOC,UAAU,OAAOC,QA3B1CC,MACXC,EAAAA,EAAAA,IAAehD,EAAMC,IAEjBL,EADAF,GACSuD,EAAAA,EAAAA,IAAkBvD,EAAIM,EAAMO,IAE5B2C,EAAAA,EAAAA,IAAiBlD,EAAMO,GAExC,EAoB8EE,QAASA,KAC3Ea,EAAAA,EAAAA,KAAC6B,EAAAA,GAAW,CAACP,MAAM,SAASE,QAASA,IAAMvC,EAAQ6C,kBAG5D,C","sources":["views/Settings/ScheduleSetup/EventCategories/EventCategoriesForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport { CustomInput, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport formValidation from '../../../../utils/validations';\r\nimport CustomPickList from '../../../../shared/Input/CustomPickList';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addEventCategory, editEventCategory, getEventCategory } from '../../../../redux/actions/ScheduleSettings/eventCategoryAction';\r\nimport { getEvents } from '../../../../redux/actions/ScheduleSettings/eventsActions';\r\n\r\nconst EventCategoriesForm = () => {\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getEvents());\r\n    }, [dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        isActive: true,\r\n        event: [],\r\n    });\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getEventCategory(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        isActive: data.isActive,\r\n                        event: data.event,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const history = useHistory();\r\n    const loading = useSelector((state) => state?.loader?.isLoading);\r\n    const { allEventsDropDown } = useSelector((state) => state?.event);\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editEventCategory(id, data, history));\r\n            } else {\r\n                dispatch(addEventCategory(data, history));\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Event Categories\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} extraClassName=\"text-right\" />\r\n                </CustomGridLayout>\r\n                <CustomCard title=\"Add Event Setups\" col=\"12\">\r\n                    <CustomPickList\r\n                        name=\"event\"\r\n                        selected={data?.event}\r\n                        sourceData={allEventsDropDown}\r\n                        onPickListChange={handleChange}\r\n                        showTargetControls={true}\r\n                    />\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EventCategoriesForm;\r\n"],"names":["EventCategoriesForm","id","useParams","dispatch","useDispatch","useEffect","getEvents","data","setData","useState","name","isActive","event","getEventCategory","history","useHistory","loading","useSelector","state","_state$loader","loader","isLoading","allEventsDropDown","handleChange","_ref","value","formErrors","formValidation","prev","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomGridLayout","CustomInput","onChange","required","CustomInputSwitch","extraClassName","CustomCard","title","col","CustomPickList","selected","sourceData","onPickListChange","showTargetControls","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editEventCategory","addEventCategory","LightButton","goBack"],"sourceRoot":""}