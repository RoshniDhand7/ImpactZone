{"version":3,"file":"static/js/278.34c66b89.chunk.js","mappings":"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","sources":["views/Settings/Inventory/Vendors/VendorForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputMask, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { getCitiesByState, getStatesByCountry, showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addVendors, editVendors, getVendor } from '../../../../redux/actions/Settings/InventorySetup/vendorsAction';\r\n\r\nconst VendorForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [states, setStates] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        const updatedStates = getStatesByCountry('US');\r\n        setStates(updatedStates);\r\n    }, [dispatch]);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getVendor(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        email: data.email,\r\n                        phone: data.phone,\r\n                        address1: data.address1,\r\n                        address2: data.address2,\r\n                        city: data.city,\r\n                        state: data.state,\r\n                        zipCode: data.zipCode,\r\n                        alternateVendors: data.alternateVendors,\r\n                        isActive: data.isActive,\r\n                        paymentTerms: data.paymentTerms,\r\n                        deliveryTerms: data.deliveryTerms,\r\n                        repName: data.repName,\r\n                        repCellPhone: data.repCellPhone,\r\n                        notes: data.notes,\r\n                        alternateEmail: data.alternateEmail,\r\n                    });\r\n                    const cities = getCitiesByState('US', data.state);\r\n                    setCities(cities);\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const { vendorsDropdown } = useSelector((state) => state.vendors);\r\n\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        address1: '',\r\n        address2: '',\r\n        city: '',\r\n        state: '',\r\n        zipCode: '',\r\n        alternateVendors: '',\r\n        isActive: true,\r\n        paymentTerms: '',\r\n        deliveryTerms: '',\r\n        repName: '',\r\n        repCellPhone: '',\r\n        notes: '',\r\n        alternateEmail: '',\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation('name', value, data);\r\n\r\n        if (name === 'state') {\r\n            const city = getCitiesByState('US', value);\r\n            setCities(city);\r\n            setData((prev) => ({ ...prev, [name]: value, city: '' }));\r\n        } else if (name === 'name') {\r\n            setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n        } else {\r\n            setData((prev) => ({ ...prev, [name]: value, formErrors: {} }));\r\n        }\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData, ['zipCode', 'address1', 'address2', 'state', 'city', 'phone', 'email', 'notes'])) {\r\n            if (id) {\r\n                dispatch(editVendors(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addVendors(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormPage backText=\"Vendor\">\r\n            <CustomCard col=\"12\" title=\"Add Vendor\">\r\n                <CustomGridLayout>\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} col=\"12\" />\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"address1\" data={data} onChange={handleChange} />\r\n                    <CustomInput name=\"address2\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"state\" options={states} data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"city\" options={cities} data={data} onChange={handleChange} />\r\n                    <CustomInput name=\"zipCode\" data={data} onChange={handleChange} disabled={!data.state} />\r\n                    <CustomInputMask name=\"phone\" id=\"phone\" mask=\"(999) 999-9999\" data={data} placeholder=\"\" onChange={handleChange} />\r\n                    <CustomInput data={data} name=\"email\" onChange={handleChange} />\r\n                    <CustomInput data={data} name=\"alternateEmail\" onChange={handleChange} />\r\n                    <CustomDropDown name=\"alternateVendors\" options={vendorsDropdown} data={data} onChange={handleChange} />\r\n                    <CustomInput data={data} name=\"paymentTerms\" onChange={handleChange} />\r\n                    <CustomInput data={data} name=\"deliveryTerms\" onChange={handleChange} />\r\n                    <CustomInput data={data} name=\"repName\" onChange={handleChange} />\r\n                    <CustomInputMask name=\"repCellPhone\" id=\"repCellPhone\" mask=\"(999) 999-9999\" data={data} placeholder=\"\" onChange={handleChange} />\r\n                    <CustomTextArea name=\"notes\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default VendorForm;\r\n"],"names":["VendorForm","history","useHistory","id","useParams","dispatch","useDispatch","states","setStates","useState","cities","setCities","loading","setLoading","useEffect","updatedStates","getStatesByCountry","getVendor","data","setData","name","email","phone","address1","address2","city","state","zipCode","alternateVendors","isActive","paymentTerms","deliveryTerms","repName","repCellPhone","notes","alternateEmail","getCitiesByState","vendorsDropdown","useSelector","vendors","handleChange","_ref","value","formErrors","formValidation","prev","_jsxs","FormPage","backText","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomInputSwitch","onChange","CustomInput","required","CustomDropDown","options","disabled","CustomInputMask","mask","placeholder","CustomTextArea","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editVendors","addVendors","LightButton","goBack"],"sourceRoot":""}