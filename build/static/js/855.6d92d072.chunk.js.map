{"version":3,"file":"static/js/855.6d92d072.chunk.js","mappings":"qLAIe,SAASA,EAAQC,GAAkC,IAAjC,SAAEC,EAAQ,SAAEC,EAAQ,OAAEC,GAAQH,EAC3D,MAAMI,GAAUC,EAAAA,EAAAA,MAEVC,EAASA,KACPH,EACAC,EAAQG,QAAQJ,GAEhBC,EAAQI,QACZ,EAEJ,OACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAgB,CAAAT,SAAA,CACZC,GACGO,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0BV,SAAA,EACrCW,EAAAA,EAAAA,KAAA,KAAGD,UAAU,2CAA2CE,QAASP,KACjEG,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gDAAgDE,QAASP,EAAOL,SAAA,CAAC,WACnEC,QAGjB,MACJU,EAAAA,EAAAA,KAAAE,EAAAA,SAAA,CAAAb,SAAGA,MAGf,C,0KCfA,MA2DA,EA3D0Bc,KACtB,MAAMX,GAAUC,EAAAA,EAAAA,OACV,GAAEW,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IACvCC,EAAAA,EAAAA,YAAU,KACFP,GACAE,GACIM,EAAAA,EAAAA,IAAiBR,GAAKS,IAClBC,EAAQ,CACJC,KAAMF,EAAKE,KACXC,OAAQH,EAAKG,OACbC,WAAYJ,EAAKI,WACjBC,SAAUL,EAAKK,UACjB,IAGd,GACD,CAACd,EAAIE,IACR,MAAOO,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,CAC7BK,KAAM,GACNC,OAAQ,EACRC,WAAY,QACZC,UAAU,IAERC,EAAe/B,IAAsB,IAArB,KAAE2B,EAAI,MAAEK,GAAOhC,EACjC,MAAMiC,GAAaC,EAAAA,EAAAA,GAAeP,EAAMK,EAAOP,GAC/CC,GAASS,IAAI,IAAWA,EAAM,CAACR,GAAOK,EAAOC,gBAAc,EAW/D,OACIxB,EAAAA,EAAAA,MAACV,EAAAA,EAAQ,CAACG,SAAS,iBAAgBD,SAAA,EAC/BW,EAAAA,EAAAA,KAACwB,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,yBAAwBrC,UAC/CQ,EAAAA,EAAAA,MAAC8B,EAAAA,EAAgB,CAAAtC,SAAA,EACbW,EAAAA,EAAAA,KAAC4B,EAAAA,GAAW,CAACb,KAAK,OAAOF,KAAMA,EAAMgB,SAAUV,EAAcW,UAAQ,KACrE9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAiB,CAAChB,KAAK,SAASF,KAAMA,EAAMgB,SAAUV,KACvDnB,EAAAA,EAAAA,KAACgC,EAAAA,GAAc,CAACC,MAAM,GAAGlB,KAAK,aAAamB,QAASC,EAAAA,GAAmBtB,KAAMA,EAAMgB,SAAUV,EAAcM,IAAK,KAChHzB,EAAAA,EAAAA,KAACoC,EAAAA,GAAiB,CAACrB,KAAK,WAAWF,KAAMA,EAAMgB,SAAUV,UAGjEnB,EAAAA,EAAAA,KAACwB,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,gBAAerC,UACtCW,EAAAA,EAAAA,KAAC2B,EAAAA,EAAgB,OAErB9B,EAAAA,EAAAA,MAACwC,EAAAA,GAAiB,CAAAhD,SAAA,EACdW,EAAAA,EAAAA,KAACsC,EAAAA,GAAa,CAACL,MAAM,OAAOlC,UAAU,OAAOE,QAvBtCsC,MACXC,EAAAA,EAAAA,IAAe3B,EAAMC,IAEjBR,EADAF,GACSqC,EAAAA,EAAAA,IAAmBrC,EAAIS,EAAMJ,EAAYjB,IAEzCkD,EAAAA,EAAAA,IAAkB7B,EAAMJ,EAAYjB,GAErD,EAgB0EgB,QAASA,KAC3ER,EAAAA,EAAAA,KAAC2C,EAAAA,GAAW,CAACV,MAAM,SAAShC,QAASA,IAAMT,EAAQI,gBAEhD,C","sources":["shared/Layout/FormPage.jsx","views/Settings/Inventory/ReferralGroup/ReferralGroupForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputNumber, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { amountTypeOptions } from '../../../../utils/dropdownConstants';\r\nimport { addReferralGroups, editReferralGroups, getReferralGroup } from '../../../../redux/actions/InventorySettings/referralGroupAction';\r\n\r\nconst ReferralGroupForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getReferralGroup(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        amount: data.amount,\r\n                        amountType: data.amountType,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        amount: 0,\r\n        amountType: 'FIXED',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editReferralGroups(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addReferralGroups(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Referral Group\">\r\n            <CustomCard col=\"12\" title=\"Add New Referral Group\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomInputNumber name=\"amount\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown label=\"\" name=\"amountType\" options={amountTypeOptions} data={data} onChange={handleChange} col={1} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Catalog Items\">\r\n                <CustomGridLayout></CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default ReferralGroupForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","ReferralGroupForm","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","getReferralGroup","data","setData","name","amount","amountType","isActive","handleChange","value","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomInputNumber","CustomDropDown","label","options","amountTypeOptions","CustomInputSwitch","CustomButtonGroup","PrimaryButton","handleSave","showFormErrors","editReferralGroups","addReferralGroups","LightButton"],"sourceRoot":""}