{"version":3,"file":"static/js/67.1e230b13.chunk.js","mappings":"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","sources":["views/Settings/MembersSetup/Resources/ResourcesForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomMultiselect } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { getLocations } from '../../../../redux/actions/ScheduleSettings/locationsActions';\r\nimport { hoursOptions } from '../../../../utils/dropdownConstants';\r\nimport { getCatalogItems } from '../../../../redux/actions/InventorySettings/catalogItemsAction';\r\nimport { addResource, editResource, getResource } from '../../../../redux/actions/Settings/MembershipSetup/resourceAction';\r\nimport { getResourceTypes } from '../../../../redux/actions/Settings/MembershipSetup/resourceTypeAction';\r\n\r\nconst ResourcesForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        dispatch(getResourceTypes());\r\n        dispatch(getLocations());\r\n        dispatch(getCatalogItems());\r\n    }, [dispatch]);\r\n    const { locationDropdown } = useSelector((state) => state.locations);\r\n    const { resourceTypeDropdown } = useSelector((state) => state.settings.members);\r\n    const { catalogServiceDropdown } = useSelector((state) => state.catalogItems);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getResource(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        resourceType: data.resourceType,\r\n                        location: data.location,\r\n                        availableQuantity: data.availableQuantity,\r\n                        usedInEvents: data.usedInEvents,\r\n                        pastDue: data.pastDue,\r\n                        isActive: data.isActive,\r\n                        services: data.services,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        resourceType: '',\r\n        location: '',\r\n        availableQuantity: '',\r\n        usedInEvents: '',\r\n        pastDue: '',\r\n        isActive: true,\r\n        services: [],\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData, ['services'])) {\r\n            if (id) {\r\n                dispatch(editResource(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addResource(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Resources\">\r\n            <CustomCard col=\"12\" title=\"Resource\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"resourceType\" options={resourceTypeDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"location\" options={locationDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"availableQuantity\" data={data} onChange={handleChange} />\r\n                    <CustomInput name=\"usedInEvents\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"pastDue\" options={hoursOptions} data={data} onChange={handleChange} required />\r\n                    <CustomMultiselect name=\"services\" options={catalogServiceDropdown} data={data} onChange={handleChange} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default ResourcesForm;\r\n"],"names":["ResourcesForm","history","useHistory","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","getResourceTypes","getLocations","getCatalogItems","locationDropdown","useSelector","state","locations","resourceTypeDropdown","settings","members","catalogServiceDropdown","catalogItems","getResource","data","setData","name","resourceType","location","availableQuantity","usedInEvents","pastDue","isActive","services","handleChange","_ref","value","formErrors","formValidation","prev","_jsxs","FormPage","backText","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","hoursOptions","CustomMultiselect","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editResource","addResource","LightButton","goBack"],"sourceRoot":""}