{"version":3,"file":"static/js/685.a5b2105c.chunk.js","mappings":"8RAaA,MAuEA,EAvEsBA,KAClB,MAAMC,GAAUC,EAAAA,EAAAA,OACV,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAEvCC,EAAAA,EAAAA,YAAU,KACNL,GAASM,EAAAA,EAAAA,OACTN,GAASO,EAAAA,EAAAA,MAAW,GACrB,CAACP,IACJ,MAAM,SAAEQ,IAAaC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,SAC5C,qBAAEC,IAAyBH,EAAAA,EAAAA,KAAaC,GAAUA,EAAMG,gBAE9DR,EAAAA,EAAAA,YAAU,KACFP,GACAE,GACIc,EAAAA,EAAAA,IAAYhB,GAAKiB,IACbC,EAAQ,CACJC,KAAMF,EAAKE,KACXJ,aAAcE,EAAKF,aACnBK,KAAMH,EAAKG,KACXC,SAAUJ,EAAKI,UACjB,IAGd,GACD,CAACrB,EAAIE,IACR,MAAOe,EAAMC,IAAWZ,EAAAA,EAAAA,UAAS,CAC7Ba,KAAM,GACNJ,aAAc,GACdK,KAAM,KAEJE,EAAeC,IAAsB,IAArB,KAAEJ,EAAI,MAAEK,GAAOD,EACjC,MAAME,GAAaC,EAAAA,EAAAA,GAAeP,EAAMK,EAAOP,GAC/CC,GAASS,IAAI,IAAWA,EAAM,CAACR,GAAOK,EAAOC,gBAAc,EAW/D,OACIG,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,SAAS,YAAWC,SAAA,EAC1BC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,gBAAeJ,UACtCH,EAAAA,EAAAA,MAACQ,EAAAA,EAAgB,CAAAL,SAAA,EACbC,EAAAA,EAAAA,KAACK,EAAAA,GAAW,CAAClB,KAAK,OAAOF,KAAMA,EAAMqB,SAAUhB,EAAciB,UAAQ,KACrEP,EAAAA,EAAAA,KAACQ,EAAAA,GAAc,CAACrB,KAAK,eAAesB,QAAS3B,EAAsBG,KAAMA,EAAMqB,SAAUhB,EAAciB,UAAQ,KAC/GP,EAAAA,EAAAA,KAACU,EAAAA,GAAiB,CACdvB,KAAK,OACLsB,QAAiB,OAAR/B,QAAQ,IAARA,OAAQ,EAARA,EAAUiC,KAAKC,IACb,CAAEC,MAAOD,EAAKzB,KAAMK,MAAOoB,EAAKE,QAE3C7B,KAAMA,EACN8B,YAAY,QACZT,SAAUhB,KAEdU,EAAAA,EAAAA,KAACgB,EAAAA,GAAiB,CAAC7B,KAAK,WAAWF,KAAMA,EAAMqB,SAAUhB,UAGjEM,EAAAA,EAAAA,MAACqB,EAAAA,GAAiB,CAAAlB,SAAA,EACdC,EAAAA,EAAAA,KAACkB,EAAAA,GAAa,CAACL,MAAM,OAAOM,UAAU,OAAOC,QA5BtCC,MACXC,EAAAA,EAAAA,IAAerC,EAAMC,IAEjBhB,EADAF,GACSuD,EAAAA,EAAAA,IAAavD,EAAIiB,EAAMZ,EAAYP,IAEnC0D,EAAAA,EAAAA,IAAYvC,EAAMZ,EAAYP,GAE/C,EAqB0EM,QAASA,KAC3E4B,EAAAA,EAAAA,KAACyB,EAAAA,GAAW,CAACZ,MAAM,SAASO,QAASA,IAAMtD,EAAQ4D,gBAEhD,C","sources":["views/Settings/ScheduleSetup/Locations/LocationsForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomMultiselect } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addLocation, editLocation, getLocation } from '../../../../redux/actions/ScheduleSettings/locationsActions';\r\nimport { getLocationTypes } from '../../../../redux/actions/ScheduleSettings/locationTypeActions';\r\nimport { getClubs } from '../../../../redux/actions/BusinessSettings/clubsAction';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\n\r\nconst LocationsForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(getLocationTypes());\r\n        dispatch(getClubs());\r\n    }, [dispatch]);\r\n    const { allClubs } = useSelector((state) => state.clubs);\r\n    const { locationTypeDropdown } = useSelector((state) => state.locationType);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getLocation(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        locationType: data.locationType,\r\n                        club: data.club,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        locationType: '',\r\n        club: [],\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editLocation(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addLocation(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Locations\">\r\n            <CustomCard col=\"12\" title=\"Add Locations\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"locationType\" options={locationTypeDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomMultiselect\r\n                        name=\"club\"\r\n                        options={allClubs?.map((item) => {\r\n                            return { label: item.name, value: item._id };\r\n                        })}\r\n                        data={data}\r\n                        optionLabel=\"label\"\r\n                        onChange={handleChange}\r\n                    />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default LocationsForm;\r\n"],"names":["LocationsForm","history","useHistory","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","getLocationTypes","getClubs","allClubs","useSelector","state","clubs","locationTypeDropdown","locationType","getLocation","data","setData","name","club","isActive","handleChange","_ref","value","formErrors","formValidation","prev","_jsxs","FormPage","backText","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","CustomMultiselect","map","item","label","_id","optionLabel","CustomInputSwitch","CustomButtonGroup","PrimaryButton","className","onClick","handleSave","showFormErrors","editLocation","addLocation","LightButton","goBack"],"sourceRoot":""}