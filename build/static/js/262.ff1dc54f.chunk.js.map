{"version":3,"file":"static/js/262.ff1dc54f.chunk.js","mappings":"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","sources":["shared/Layout/FormPage.jsx","views/Settings/ScheduleSetup/Locations/LocationsForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addLocation, editLocation, getLocation } from '../../../../redux/actions/ScheduleSettings/locationsActions';\r\nimport { getLocationTypes } from '../../../../redux/actions/ScheduleSettings/locationTypeActions';\r\nimport { getClubs } from '../../../../redux/actions/BusinessSettings/clubsAction';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\n\r\nconst LocationsForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(getLocationTypes());\r\n        dispatch(getClubs());\r\n    }, []);\r\n    const { allClubs } = useSelector((state) => state.clubs);\r\n    const { locationTypeDropdown } = useSelector((state) => state.locationType);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getLocation(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        locationType: data.locationType,\r\n                        club: data.club,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        locationType: '',\r\n        club: '',\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editLocation(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addLocation(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Locations\">\r\n            <CustomCard col=\"12\" title=\"Add Locations\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"locationType\" options={locationTypeDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomDropDown\r\n                        name=\"club\"\r\n                        options={allClubs?.map((item) => {\r\n                            return { label: item.name, value: item._id };\r\n                        })}\r\n                        data={data}\r\n                        optionLabel=\"label\"\r\n                        onChange={handleChange}\r\n                        required\r\n                    />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default LocationsForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","LocationsForm","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","getLocationTypes","getClubs","allClubs","useSelector","state","clubs","locationTypeDropdown","locationType","getLocation","data","setData","name","club","isActive","handleChange","value","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","map","item","label","_id","optionLabel","CustomInputSwitch","CustomButtonGroup","PrimaryButton","handleSave","showFormErrors","editLocation","addLocation","LightButton"],"sourceRoot":""}