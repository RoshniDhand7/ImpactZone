{"version":3,"file":"static/js/633.1b2bfcee.chunk.js","mappings":"qLAIe,SAASA,EAAQC,GAAkC,IAAjC,SAAEC,EAAQ,SAAEC,EAAQ,OAAEC,GAAQH,EAC3D,MAAMI,GAAUC,EAAAA,EAAAA,MAEVC,EAASA,KACPH,EACAC,EAAQG,QAAQJ,GAEhBC,EAAQI,QACZ,EAEJ,OACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAgB,CAAAT,SAAA,CACZC,GACGO,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0BV,SAAA,EACrCW,EAAAA,EAAAA,KAAA,KAAGD,UAAU,2CAA2CE,QAASP,KACjEG,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gDAAgDE,QAASP,EAAOL,SAAA,CAAC,WACnEC,QAGjB,MACJU,EAAAA,EAAAA,KAAAE,EAAAA,SAAA,CAAAb,SAAGA,MAGf,C,+JChBA,MA2FA,EA3FmBc,KACf,MAAMX,GAAUC,EAAAA,EAAAA,OACV,GAAEW,IAAOC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,OACVC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,KAC9BG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IACvCK,EAAAA,EAAAA,YAAU,KACN,MAAMC,GAAgBC,EAAAA,EAAAA,IAAmB,MACzCR,EAAUO,EAAc,GACzB,CAACV,KACJS,EAAAA,EAAAA,YAAU,KACFX,GACAE,GACIY,EAAAA,EAAAA,IAAUd,GAAKe,IACXC,EAAQ,CACJC,KAAMF,EAAKE,KACXC,MAAOH,EAAKG,MACZC,MAAOJ,EAAKI,MACZC,SAAUL,EAAKK,SACfC,SAAUN,EAAKM,SACfC,KAAMP,EAAKO,KACXC,MAAOR,EAAKQ,MACZC,QAAST,EAAKS,QACdC,iBAAkBV,EAAKU,iBACvBC,SAAUX,EAAKW,WAEnB,MAAMnB,GAASoB,EAAAA,EAAAA,IAAiB,KAAMZ,EAAKQ,OAC3Cf,EAAUD,EAAO,IAG7B,GACD,CAACP,EAAIE,IACR,MAAM,gBAAE0B,IAAoBC,EAAAA,EAAAA,KAAaN,GAAUA,EAAMO,WAElDf,EAAMC,IAAWV,EAAAA,EAAAA,UAAS,CAC7BW,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,iBAAkB,GAClBC,UAAU,IAERK,EAAe/C,IAAsB,IAArB,KAAEiC,EAAI,MAAEe,GAAOhD,EACjC,MAAMiD,GAAaC,EAAAA,EAAAA,GAAejB,EAAMe,EAAOjB,GAE/C,GAAa,UAATE,EAAkB,CAClB,MAAMK,GAAOK,EAAAA,EAAAA,IAAiB,KAAMK,GACpCxB,EAAUc,GACVN,GAASmB,IAAI,IAAWA,EAAM,CAAClB,GAAOe,EAAOV,KAAM,GAAIW,gBAC3D,MACIjB,GAASmB,IAAI,IAAWA,EAAM,CAAClB,GAAOe,EAAOC,gBACjD,EAWJ,OACIxC,EAAAA,EAAAA,MAACV,EAAAA,EAAQ,CAACG,SAAS,SAAQD,SAAA,EACvBW,EAAAA,EAAAA,KAACwC,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,aAAYrD,UACnCQ,EAAAA,EAAAA,MAAC8C,EAAAA,GAAgB,CAAAtD,SAAA,EACbW,EAAAA,EAAAA,KAAC4C,EAAAA,GAAW,CAACvB,KAAK,OAAOF,KAAMA,EAAM0B,SAAUV,EAAcW,UAAQ,KACrE9C,EAAAA,EAAAA,KAAC4C,EAAAA,GAAW,CAACvB,KAAK,WAAWF,KAAMA,EAAM0B,SAAUV,EAAcW,UAAQ,KACzE9C,EAAAA,EAAAA,KAAC4C,EAAAA,GAAW,CAACvB,KAAK,WAAWF,KAAMA,EAAM0B,SAAUV,EAAcW,UAAQ,KACzE9C,EAAAA,EAAAA,KAAC+C,EAAAA,GAAc,CAAC1B,KAAK,QAAQ2B,QAASxC,EAAQW,KAAMA,EAAM0B,SAAUV,EAAcW,UAAQ,KAC1F9C,EAAAA,EAAAA,KAAC+C,EAAAA,GAAc,CAAC1B,KAAK,OAAO2B,QAASrC,EAAQQ,KAAMA,EAAM0B,SAAUV,EAAcW,UAAQ,KACzF9C,EAAAA,EAAAA,KAAC4C,EAAAA,GAAW,CAACvB,KAAK,UAAUF,KAAMA,EAAM0B,SAAUV,EAAcW,UAAQ,KACxE9C,EAAAA,EAAAA,KAACiD,EAAAA,GAAe,CAAC5B,KAAK,QAAQjB,GAAG,QAAQ8C,KAAK,iBAAiB/B,KAAMA,EAAMgC,YAAY,GAAGN,SAAUV,EAAcW,UAAQ,KAC1H9C,EAAAA,EAAAA,KAAC4C,EAAAA,GAAW,CAACzB,KAAMA,EAAME,KAAK,QAAQwB,SAAUV,EAAcW,UAAQ,KACtE9C,EAAAA,EAAAA,KAAC+C,EAAAA,GAAc,CAAC1B,KAAK,mBAAmB2B,QAAShB,EAAiBb,KAAMA,EAAM0B,SAAUV,KACxFnC,EAAAA,EAAAA,KAACoD,EAAAA,GAAiB,CAAC/B,KAAK,WAAWF,KAAMA,EAAM0B,SAAUV,UAGjEtC,EAAAA,EAAAA,MAACwD,EAAAA,GAAiB,CAAAhE,SAAA,EACdW,EAAAA,EAAAA,KAACsD,EAAAA,GAAa,CAACC,MAAM,OAAOxD,UAAU,OAAOE,QA1BtCuD,MACXC,EAAAA,EAAAA,IAAetC,EAAMC,IAEjBd,EADAF,GACSsD,EAAAA,EAAAA,IAAYtD,EAAIe,EAAML,EAAYtB,IAElCmE,EAAAA,EAAAA,IAAWxC,EAAML,EAAYtB,GAE9C,EAmB0EqB,QAASA,KAC3Eb,EAAAA,EAAAA,KAAC4D,EAAAA,GAAW,CAACL,MAAM,SAAStD,QAASA,IAAMT,EAAQI,gBAEhD,C","sources":["shared/Layout/FormPage.jsx","views/Settings/Inventory/Vendors/VendorForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputMask, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { getCitiesByState, getStatesByCountry, showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addVendors, editVendors, getVendor } from '../../../../redux/actions/InventorySettings/vendorsAction';\r\n\r\nconst VendorForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [states, setStates] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        const updatedStates = getStatesByCountry('US');\r\n        setStates(updatedStates);\r\n    }, [dispatch]);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getVendor(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        email: data.email,\r\n                        phone: data.phone,\r\n                        address1: data.address1,\r\n                        address2: data.address2,\r\n                        city: data.city,\r\n                        state: data.state,\r\n                        zipCode: data.zipCode,\r\n                        alternateVendors: data.alternateVendors,\r\n                        isActive: data.isActive,\r\n                    });\r\n                    const cities = getCitiesByState('US', data.state);\r\n                    setCities(cities);\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const { vendorsDropdown } = useSelector((state) => state.vendors);\r\n\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        address1: '',\r\n        address2: '',\r\n        city: '',\r\n        state: '',\r\n        zipCode: '',\r\n        alternateVendors: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n\r\n        if (name === 'state') {\r\n            const city = getCitiesByState('US', value);\r\n            setCities(city);\r\n            setData((prev) => ({ ...prev, [name]: value, city: '', formErrors }));\r\n        } else {\r\n            setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n        }\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editVendors(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addVendors(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Vendor\">\r\n            <CustomCard col=\"12\" title=\"Add Vendor\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"address1\" data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"address2\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"state\" options={states} data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"city\" options={cities} data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"zipCode\" data={data} onChange={handleChange} required />\r\n                    <CustomInputMask name=\"phone\" id=\"phone\" mask=\"(999) 999-9999\" data={data} placeholder=\"\" onChange={handleChange} required />\r\n                    <CustomInput data={data} name=\"email\" onChange={handleChange} required />\r\n                    <CustomDropDown name=\"alternateVendors\" options={vendorsDropdown} data={data} onChange={handleChange} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default VendorForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","VendorForm","id","useParams","dispatch","useDispatch","states","setStates","useState","cities","setCities","loading","setLoading","useEffect","updatedStates","getStatesByCountry","getVendor","data","setData","name","email","phone","address1","address2","city","state","zipCode","alternateVendors","isActive","getCitiesByState","vendorsDropdown","useSelector","vendors","handleChange","value","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","CustomInputMask","mask","placeholder","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","handleSave","showFormErrors","editVendors","addVendors","LightButton"],"sourceRoot":""}