{"version":3,"file":"static/js/301.36bce033.chunk.js","mappings":"oRAYA,MAoEA,EApEuBA,KACnB,MAAMC,GAAUC,EAAAA,EAAAA,OACV,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACX,iBAAEC,IAAqBC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,YAEnDC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IACvCC,EAAAA,EAAAA,YAAU,KACFX,GACAE,GACIU,EAAAA,EAAAA,IAAYZ,GAAKa,IACbC,EAAQ,CACJC,KAAMF,EAAKE,KACXC,aAAcH,EAAKG,aAAaC,WAChCC,eAAgBL,EAAKK,eACrBC,kBAAmBN,EAAKM,kBACxBC,YAAaP,EAAKO,YAClBC,SAAUR,EAAKQ,UACjB,IAGd,GACD,CAACrB,EAAIE,IACR,MAAOW,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,CAC7BK,KAAM,GACNC,aAAc,QACdE,eAAgB,GAChBC,kBAAmB,GACnBC,YAAa,GACbC,UAAU,IAERC,EAAeC,IAAsB,IAArB,KAAER,EAAI,MAAES,GAAOD,EACjC,MAAME,GAAaC,EAAAA,EAAAA,GAAeX,EAAMS,EAAOX,GAC/CC,GAASa,IAAI,IAAWA,EAAM,CAACZ,GAAOS,EAAOC,gBAAc,EAW/D,OACIG,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,SAAS,aAAYC,SAAA,EAC3BC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,iBAAgBJ,UACvCH,EAAAA,EAAAA,MAACQ,EAAAA,EAAgB,CAAAL,SAAA,EACbC,EAAAA,EAAAA,KAACK,EAAAA,GAAW,CAACtB,KAAK,OAAOF,KAAMA,EAAMyB,SAAUhB,EAAciB,UAAQ,KACrEP,EAAAA,EAAAA,KAACQ,EAAAA,GAAc,CAACzB,KAAK,eAAe0B,MAAM,iBAAiBC,QAASC,EAAAA,GAAc9B,KAAMA,EAAMyB,SAAUhB,KACxGU,EAAAA,EAAAA,KAACK,EAAAA,GAAW,CAACI,MAAM,mBAAmB1B,KAAK,iBAAiBF,KAAMA,EAAMyB,SAAUhB,KAClFU,EAAAA,EAAAA,KAACQ,EAAAA,GAAc,CAACzB,KAAK,oBAAoB2B,QAAStC,EAAkBS,KAAMA,EAAMyB,SAAUhB,KAC1FU,EAAAA,EAAAA,KAACY,EAAAA,GAAc,CAAC7B,KAAK,cAAc8B,UAAU,MAAMhC,KAAMA,EAAMyB,SAAUhB,KACzEU,EAAAA,EAAAA,KAACc,EAAAA,GAAiB,CAAC/B,KAAK,WAAWF,KAAMA,EAAMyB,SAAUhB,UAGjEU,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,gBAAeJ,UACtCC,EAAAA,EAAAA,KAACI,EAAAA,EAAgB,OAGrBR,EAAAA,EAAAA,MAACmB,EAAAA,GAAiB,CAAAhB,SAAA,EACdC,EAAAA,EAAAA,KAACgB,EAAAA,GAAa,CAACP,MAAM,OAAOQ,UAAU,OAAOC,QA1BtCC,MACXC,EAAAA,EAAAA,IAAevC,EAAMC,IAEjBZ,EADAF,GACSqD,EAAAA,EAAAA,IAAarD,EAAIa,EAAMJ,EAAYX,IAEnCwD,EAAAA,EAAAA,IAAYzC,EAAMJ,EAAYX,GAE/C,EAmB0EU,QAASA,KAC3EwB,EAAAA,EAAAA,KAACuB,EAAAA,GAAW,CAACd,MAAM,SAASS,QAASA,IAAMpD,EAAQ0D,gBAEhD,C","sources":["views/Settings/Inventory/Categories/CategoriesForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addCategory, editCategory, getCategory } from '../../../../redux/actions/InventorySettings/categoriesAction';\r\nimport { yesNoOptions } from '../../../../utils/dropdownConstants';\r\n\r\nconst CategoriesForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const { categoryDropdown } = useSelector((state) => state.category);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getCategory(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        displayInPos: data.displayInPos.toString(),\r\n                        posButtonLabel: data.posButtonLabel,\r\n                        availableCategory: data.availableCategory,\r\n                        description: data.description,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        displayInPos: 'false',\r\n        posButtonLabel: '',\r\n        availableCategory: '',\r\n        description: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editCategory(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addCategory(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Categories\">\r\n            <CustomCard col=\"12\" title=\"Add Categories\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"displayInPos\" label=\"Display In POS\" options={yesNoOptions} data={data} onChange={handleChange} />\r\n                    <CustomInput label=\"POS Button Label\" name=\"posButtonLabel\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"availableCategory\" options={categoryDropdown} data={data} onChange={handleChange} />\r\n                    <CustomTextArea name=\"description\" maxLength=\"266\" data={data} onChange={handleChange} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Catalog Items\">\r\n                <CustomGridLayout></CustomGridLayout>\r\n            </CustomCard>\r\n\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default CategoriesForm;\r\n"],"names":["CategoriesForm","history","useHistory","id","useParams","dispatch","useDispatch","categoryDropdown","useSelector","state","category","loading","setLoading","useState","useEffect","getCategory","data","setData","name","displayInPos","toString","posButtonLabel","availableCategory","description","isActive","handleChange","_ref","value","formErrors","formValidation","prev","_jsxs","FormPage","backText","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","label","options","yesNoOptions","CustomTextArea","maxLength","CustomInputSwitch","CustomButtonGroup","PrimaryButton","className","onClick","handleSave","showFormErrors","editCategory","addCategory","LightButton","goBack"],"sourceRoot":""}