{"version":3,"file":"static/js/509.713f94a5.chunk.js","mappings":"6RAaA,MAqEA,EArEsBA,KAClB,MAAMC,GAAUC,EAAAA,EAAAA,OACV,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,KACNF,GAASG,EAAAA,EAAAA,OACTH,GAASI,EAAAA,EAAAA,MAAmB,GAC7B,CAACJ,IAEJ,MAAM,sBAAEK,EAAqB,kBAAEC,IAAsBC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,SAASC,WACrF,eAAEC,IAAmBJ,EAAAA,EAAAA,KAAaC,GAAe,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOI,eAEzDV,EAAAA,EAAAA,YAAU,KACFJ,GACAE,GACIa,EAAAA,EAAAA,IAAYf,GAAKgB,IACbC,EAAQ,CACJC,KAAMF,EAAKE,KACXC,cAAeH,EAAKG,cACpBC,YAAaJ,EAAKI,YAClBC,SAAUL,EAAKK,SACfC,aAAcN,EAAKM,cACrB,IAGd,GACD,CAACtB,EAAIE,IACR,MAAOc,EAAMC,IAAWM,EAAAA,EAAAA,UAAS,CAC7BL,KAAM,GACNC,cAAe,GACfC,YAAa,GACbC,UAAU,EACVC,aAAc,KAEZE,EAAeC,IAAsB,IAArB,KAAEP,EAAI,MAAEQ,GAAOD,EACjC,MAAME,GAAaC,EAAAA,EAAAA,GAAeV,EAAMQ,EAAOV,GAC/CC,GAASY,IAAI,IAAWA,EAAM,CAACX,GAAOQ,EAAOC,gBAAc,EAY/D,OACIG,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,SAAS,YAAWC,SAAA,EAC1BC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,uBAAsBJ,UAC7CH,EAAAA,EAAAA,MAACQ,EAAAA,EAAgB,CAAAL,SAAA,EACbC,EAAAA,EAAAA,KAACK,EAAAA,GAAW,CAACrB,KAAK,OAAOF,KAAMA,EAAMwB,SAAUhB,EAAciB,UAAQ,KACrEP,EAAAA,EAAAA,KAACQ,EAAAA,GAAc,CAACxB,KAAK,gBAAgByB,QAASpC,EAAuBS,KAAMA,EAAMwB,SAAUhB,EAAciB,UAAQ,KACjHP,EAAAA,EAAAA,KAACU,EAAAA,GAAc,CAAC1B,KAAK,cAAc2B,UAAU,MAAM7B,KAAMA,EAAMwB,SAAUhB,KACzEU,EAAAA,EAAAA,KAACY,EAAAA,GAAiB,CAAC5B,KAAK,WAAWF,KAAMA,EAAMwB,SAAUhB,UAGjEU,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,iBAAgBJ,UACvCC,EAAAA,EAAAA,KAACa,EAAAA,EAAc,CAAC7B,KAAK,eAAe8B,SAAc,OAAJhC,QAAI,IAAJA,OAAI,EAAJA,EAAMM,aAAc2B,WAAYzC,EAAmB0C,iBAAkB1B,OAEvHM,EAAAA,EAAAA,MAACqB,EAAAA,GAAiB,CAAAlB,SAAA,EACdC,EAAAA,EAAAA,KAACkB,EAAAA,GAAa,CAACC,MAAM,OAAOC,UAAU,OAAOC,QAxBtCC,MACXC,EAAAA,EAAAA,IAAezC,EAAMC,IAEjBf,EADAF,GACS0D,EAAAA,EAAAA,IAAa1D,EAAIgB,EAAMlB,IAEvB6D,EAAAA,EAAAA,IAAY3C,EAAMlB,GAEnC,EAiB0E8D,QAAS/C,KAC3EqB,EAAAA,EAAAA,KAAC2B,EAAAA,GAAW,CAACR,MAAM,SAASE,QAASA,IAAMzD,EAAQgE,gBAEhD,C","sources":["views/Settings/MembersSetup/Campaigns/CompaignsForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport CustomPickList from '../../../../shared/Input/CustomPickList';\r\nimport { addCampaign, editCampaign, getCampaign } from '../../../../redux/actions/Settings/MembershipSetup/campaignsAction';\r\nimport { getCampaignGroups, getCampaignTypes } from '../../../../redux/actions/Settings/MembershipSetup/campaignsGroupAction';\r\n\r\nconst CompaignsForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getCampaignGroups());\r\n        dispatch(getCampaignTypes());\r\n    }, [dispatch]);\r\n\r\n    const { compaignGroupDropdown, allCampaignsTypes } = useSelector((state) => state.settings.members);\r\n    const { isTableLoading } = useSelector((state) => state?.tableLoader);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getCampaign(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        campaignGroup: data.campaignGroup,\r\n                        description: data.description,\r\n                        isActive: data.isActive,\r\n                        campaignType: data.campaignType,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        campaignGroup: '',\r\n        description: '',\r\n        isActive: true,\r\n        campaignType: [],\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editCampaign(id, data, history));\r\n            } else {\r\n                dispatch(addCampaign(data, history));\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormPage backText=\"Campaigns\">\r\n            <CustomCard col=\"12\" title=\"Add Campaign Details\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"campaignGroup\" options={compaignGroupDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomTextArea name=\"description\" maxLength=\"256\" data={data} onChange={handleChange} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Campaign Types\">\r\n                <CustomPickList name=\"campaignType\" selected={data?.campaignType} sourceData={allCampaignsTypes} onPickListChange={handleChange} />\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={isTableLoading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default CompaignsForm;\r\n"],"names":["CompaignsForm","history","useHistory","id","useParams","dispatch","useDispatch","useEffect","getCampaignGroups","getCampaignTypes","compaignGroupDropdown","allCampaignsTypes","useSelector","state","settings","members","isTableLoading","tableLoader","getCampaign","data","setData","name","campaignGroup","description","isActive","campaignType","useState","handleChange","_ref","value","formErrors","formValidation","prev","_jsxs","FormPage","backText","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","CustomTextArea","maxLength","CustomInputSwitch","CustomPickList","selected","sourceData","onPickListChange","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editCampaign","addCampaign","loading","LightButton","goBack"],"sourceRoot":""}