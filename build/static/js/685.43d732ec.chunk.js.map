{"version":3,"file":"static/js/685.43d732ec.chunk.js","mappings":"sSAaA,MA2DA,EA3DsBA,KAClB,MAAMC,GAAUC,EAAAA,EAAAA,OACV,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IACjC,qBAAEC,IAAyBC,EAAAA,EAAAA,MAC3B,cAAEC,IAAkBC,EAAAA,EAAAA,MAE1BC,EAAAA,EAAAA,YAAU,KACFX,GACAE,GACIU,EAAAA,EAAAA,IAAYZ,GAAKa,IACbC,EAAQ,CACJC,KAAMF,EAAKE,KACXC,aAAcH,EAAKG,aACnBC,MAAOJ,EAAKI,MACZC,SAAUL,EAAKK,UACjB,IAGd,GACD,CAAClB,EAAIE,IACR,MAAOW,EAAMC,IAAWR,EAAAA,EAAAA,UAAS,CAC7BS,KAAM,GACNC,aAAc,GACdC,MAAO,GACPC,UAAU,IAERC,EAAeC,IAAsB,IAArB,KAAEL,EAAI,MAAEM,GAAOD,EACjC,MAAME,GAAaC,EAAAA,EAAAA,GAAeR,EAAMM,EAAOR,GAC/CC,GAASU,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAI,IAAE,CAACT,GAAOM,EAAOC,gBAAc,EAW/D,OACII,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,SAAS,YAAWC,SAAA,EAC1BC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,gBAAeJ,UACtCH,EAAAA,EAAAA,MAACQ,EAAAA,EAAgB,CAAAL,SAAA,EACbC,EAAAA,EAAAA,KAACK,EAAAA,GAAW,CAACpB,KAAK,OAAOF,KAAMA,EAAMuB,SAAUjB,EAAckB,UAAQ,KACrEP,EAAAA,EAAAA,KAACQ,EAAAA,GAAc,CAACvB,KAAK,eAAewB,QAAShC,EAAsBM,KAAMA,EAAMuB,SAAUjB,EAAckB,UAAQ,KAC/GP,EAAAA,EAAAA,KAACU,EAAAA,GAAiB,CAACzB,KAAK,QAAQwB,QAAS9B,EAAeI,KAAMA,EAAMuB,SAAUjB,EAAckB,UAAQ,KACpGP,EAAAA,EAAAA,KAACW,EAAAA,GAAiB,CAAC1B,KAAK,WAAWF,KAAMA,EAAMuB,SAAUjB,UAGjEO,EAAAA,EAAAA,MAACgB,EAAAA,GAAiB,CAAAb,SAAA,EACdC,EAAAA,EAAAA,KAACa,EAAAA,GAAa,CAACC,MAAM,OAAOC,UAAU,OAAOC,QApBtCC,MACXC,EAAAA,EAAAA,IAAenC,EAAMC,IAEjBZ,EADAF,GACSiD,EAAAA,EAAAA,IAAajD,EAAIa,EAAMR,EAAYP,IAEnCoD,EAAAA,EAAAA,IAAYrC,EAAMR,EAAYP,GAE/C,EAa0EM,QAASA,KAC3E0B,EAAAA,EAAAA,KAACqB,EAAAA,GAAW,CAACP,MAAM,SAASE,QAASA,IAAMhD,EAAQsD,gBAEhD,C","sources":["views/Settings/ScheduleSetup/Locations/LocationsForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomMultiselect } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport useGetClubs from '../../../../hooks/useGetClubs';\r\nimport useLocationType from '../../../../hooks/Schedule/useLocationType';\r\nimport { addLocation, editLocation, getLocation } from '../../../../redux/actions/Settings/ScheduleSetup/locationsActions';\r\n\r\nconst LocationsForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    const { locationTypeDropdown } = useLocationType();\r\n    const { clubsDropdown } = useGetClubs();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getLocation(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        locationType: data.locationType,\r\n                        clubs: data.clubs,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        locationType: '',\r\n        clubs: [],\r\n        isActive: true,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editLocation(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addLocation(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Locations\">\r\n            <CustomCard col=\"12\" title=\"Add Locations\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"locationType\" options={locationTypeDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomMultiselect name=\"clubs\" options={clubsDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default LocationsForm;\r\n"],"names":["LocationsForm","history","useHistory","id","useParams","dispatch","useDispatch","loading","setLoading","useState","locationTypeDropdown","useLocationType","clubsDropdown","useGetClubs","useEffect","getLocation","data","setData","name","locationType","clubs","isActive","handleChange","_ref","value","formErrors","formValidation","prev","_objectSpread","_jsxs","FormPage","backText","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","CustomMultiselect","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editLocation","addLocation","LightButton","goBack"],"sourceRoot":""}