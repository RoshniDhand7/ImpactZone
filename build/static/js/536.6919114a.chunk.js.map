{"version":3,"file":"static/js/536.6919114a.chunk.js","mappings":"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","sources":["shared/Layout/FormPage.jsx","views/Settings/Inventory/ProfitCenter/ProfitCenterForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addLevel, editLevel, getLevel } from '../../../../redux/actions/ScheduleSettings/levelActions';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\n\r\nconst ProfitCenterForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        if (id) {\r\n            // dispatch(\r\n            //     getLevel(id, (data) => {\r\n            //         setData({\r\n            //             name: data.name,\r\n            //             isActive: data.isActive,\r\n            //         });\r\n            //     }),\r\n            // );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                // dispatch(editLevel(id, data, setLoading, history));\r\n            } else {\r\n                // dispatch(addLevel(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Profit Center\">\r\n            <CustomCard col=\"12\" title=\"General\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"glCode\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"availableProfitCenter\" options={[]} data={data} />\r\n                    <CustomDropDown name=\"selectParentProfitCenter\" options={[]} data={data} />\r\n                    <CustomTextArea name=\"description\" maxLength=\"266\" data={data} onChange={handleChange} />\r\n\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Catalog Items\">\r\n                <CustomGridLayout></CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Data Export\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"profitCenterCode\" data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"earningsCode\" data={data} onChange={handleChange} required />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default ProfitCenterForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","ProfitCenterForm","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","data","setData","name","isActive","handleChange","value","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","CustomTextArea","maxLength","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","handleSave","showFormErrors","LightButton"],"sourceRoot":""}