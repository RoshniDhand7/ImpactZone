{"version":3,"file":"static/js/536.efce8094.chunk.js","mappings":"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","sources":["shared/Layout/FormPage.jsx","views/Settings/Inventory/ProfitCenter/ProfitCenterForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addProfitCenters, editProfitCenters, getProfitCenter } from '../../../../redux/actions/InventorySettings/profitCenterAction';\r\n\r\nconst ProfitCenterForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    const { profitCenterDropdown } = useSelector((state) => state.profitCenter);\r\n\r\n    console.log('profitCenterDropdown>>', profitCenterDropdown);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getProfitCenter(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        glCode: data.glCode,\r\n                        availableProfitCenter: data.availableProfitCenter,\r\n                        parentProfitCenter: data.parentProfitCenter,\r\n                        description: data.description,\r\n                        profitCenterCode: data.profitCenterCode,\r\n                        earningsCode: data.earningsCode,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        glCode: '',\r\n        availableProfitCenter: '',\r\n        parentProfitCenter: '',\r\n        description: '',\r\n        profitCenterCode: '',\r\n        earningsCode: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editProfitCenters(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addProfitCenters(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Profit Center\">\r\n            <CustomCard col=\"12\" title=\"General\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"glCode\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"availableProfitCenter\" options={profitCenterDropdown} data={data} optionLabel=\"name\" onChange={handleChange} />\r\n                    <CustomDropDown name=\"parentProfitCenter\" options={profitCenterDropdown} data={data} onChange={handleChange} optionLabel=\"name\" />\r\n                    <CustomTextArea name=\"description\" maxLength=\"266\" data={data} onChange={handleChange} />\r\n\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Catalog Items\">\r\n                <CustomGridLayout></CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Data Export\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"profitCenterCode\" data={data} onChange={handleChange} />\r\n                    <CustomInput name=\"earningsCode\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default ProfitCenterForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","ProfitCenterForm","id","useParams","dispatch","useDispatch","loading","setLoading","useState","profitCenterDropdown","useSelector","state","profitCenter","console","log","useEffect","getProfitCenter","data","setData","name","glCode","availableProfitCenter","parentProfitCenter","description","profitCenterCode","earningsCode","isActive","handleChange","value","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","optionLabel","CustomTextArea","maxLength","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","handleSave","showFormErrors","editProfitCenters","addProfitCenters","LightButton"],"sourceRoot":""}