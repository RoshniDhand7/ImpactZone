{"version":3,"file":"static/js/845.38309e64.chunk.js","mappings":"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","sources":["shared/Layout/FormPage.jsx","utils/dropdownConstants.js","views/Settings/Inventory/Categories/CategoriesForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","export const yesNoOptions = [\r\n    {\r\n        name: 'Yes',\r\n        value: 'true',\r\n    },\r\n    {\r\n        name: 'No',\r\n        value: 'false',\r\n    },\r\n];\r\n\r\nexport const amountTypeOptions = [\r\n    {\r\n        name: '$',\r\n        value: 'FIXED',\r\n    },\r\n    {\r\n        name: '%',\r\n        value: 'PERCENTAGE',\r\n    },\r\n];\r\n\r\nexport const bonusTypeConstantsOptions = [\r\n    {\r\n        name: 'Single Client',\r\n        value: 'SINGLE_CLIENT',\r\n    },\r\n    {\r\n        name: 'Service Value',\r\n        value: 'SERVICE_VALUE',\r\n    },\r\n];\r\n\r\nexport const CommissionGpTypeOptions = ['Products', 'Services', 'Agreement'].map((name) => ({ name, value: name }));\r\n\r\nexport const durationOptions = ['Days', 'Weeks', 'Months', 'Years'].map((name) => ({ name, value: name.toUpperCase() }));\r\n\r\nexport const servicesOptions = ['Private Sessions', 'Yoga Sessions', 'Reformer', 'Etc'].map((name) => ({ name, value: name }));\r\n\r\nexport const checkInLimitOptions = [\r\n    {\r\n        name: 'No Limit',\r\n        value: 'No Limit',\r\n    },\r\n];\r\n\r\nfor (let i = 1; i <= 50; i++) {\r\n    const option = {\r\n        name: `${i}`,\r\n        value: `${i}`,\r\n    };\r\n    checkInLimitOptions.push(option);\r\n}\r\nexport const perOptions = [\r\n    {\r\n        name: 'Week (7 days)',\r\n        value: 'Week (7 Days)',\r\n    },\r\n    {\r\n        name: 'Month (30 days)',\r\n        value: 'Month (30 days)',\r\n    },\r\n    {\r\n        name: 'Year (365 days)',\r\n        value: 'Year (365 days)',\r\n    },\r\n    {\r\n        name: 'Calendar Week (sunday)',\r\n        value: 'Calendar Week (sunday)',\r\n    },\r\n    {\r\n        name: 'Calendar Week (monday)',\r\n        value: 'Calendar Week (monday)',\r\n    },\r\n    {\r\n        name: 'Calendar Month',\r\n        value: 'Calendar Month',\r\n    },\r\n    {\r\n        name: 'Calendar Year',\r\n        value: 'Calendar Year',\r\n    },\r\n];\r\n\r\nexport const restrictionOptions = [\r\n    {\r\n        name: 'Club',\r\n        value: 'Club',\r\n    },\r\n    {\r\n        name: 'Company',\r\n        value: 'Company',\r\n    },\r\n];\r\n\r\nexport const daysOptions = [];\r\n\r\nfor (let i = 1; i <= 30; i++) {\r\n    const option = {\r\n        name: `${i} days`,\r\n        value: `${i} days`,\r\n    };\r\n    daysOptions.push(option);\r\n}\r\n\r\nexport const hoursOptions = [];\r\n\r\nfor (let i = 12; i <= 72; i += 12) {\r\n    const option = {\r\n        name: `${i} hours`,\r\n        value: `${i} hours`,\r\n    };\r\n    hoursOptions.push(option);\r\n}\r\n\r\nexport const reasonCodeTypeOptions = [\r\n    'Agreement Hold',\r\n    'Cancel Pending POS Transaction',\r\n    'Cancel Agreement',\r\n    'Cancel Price',\r\n    'Commission Override',\r\n    'Drawer Adjustment',\r\n    'Event Status',\r\n    'Freeze Agreement',\r\n    'No Sale',\r\n    'Void',\r\n    'Waive Tax',\r\n].map((name) => ({ name, value: name }));\r\n\r\nexport const classesPayTypeOptions = [\r\n    {\r\n        name: 'Incremental Pay',\r\n        value: 'INCREMENTAL_PAY',\r\n    },\r\n    {\r\n        name: 'Pay Per Class',\r\n        value: 'PAY_PER_CLASS',\r\n    },\r\n    {\r\n        name: 'Pay Per Client',\r\n        value: 'PAY_PER_CLIENT',\r\n    },\r\n    {\r\n        name: '% Rate',\r\n        value: 'PERCENTAGE_RATE',\r\n    },\r\n];\r\nexport const substitutionPriorityOptions = [\r\n    {\r\n        name: 'Suggested',\r\n        value: 'SUGGESTED',\r\n    },\r\n    {\r\n        name: 'High',\r\n        value: 'HIGH',\r\n    },\r\n    {\r\n        name: 'Medium',\r\n        value: 'MEDIUM',\r\n    },\r\n    {\r\n        name: 'Low',\r\n        value: 'LOW',\r\n    },\r\n];\r\nexport const AppointmentPayPriorityOptions = [\r\n    {\r\n        name: 'Per Event',\r\n        value: 'PER-EVENT',\r\n    },\r\n    {\r\n        name: 'Person',\r\n        value: 'PERSON',\r\n    },\r\n];\r\n\r\nexport const EmployeeCommissionType = [\r\n    {\r\n        name: 'Per Sale',\r\n        value: 'PER_SALE',\r\n    },\r\n    {\r\n        name: 'Per Item',\r\n        value: 'PER_ITEM',\r\n    },\r\n];\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addCategory, editCategory, getCategory } from '../../../../redux/actions/InventorySettings/categoriesAction';\r\nimport { yesNoOptions } from '../../../../utils/dropdownConstants';\r\n\r\nconst CategoriesForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const { categoryDropdown } = useSelector((state) => state.category);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getCategory(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        displayInPos: data.displayInPos.toString(),\r\n                        posButtonLabel: data.posButtonLabel,\r\n                        availableCategory: data.availableCategory,\r\n                        description: data.description,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        displayInPos: 'false',\r\n        posButtonLabel: '',\r\n        availableCategory: '',\r\n        description: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editCategory(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addCategory(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Categories\">\r\n            <CustomCard col=\"12\" title=\"Add Categories\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"displayInPos\" label=\"Display In POS\" options={yesNoOptions} data={data} onChange={handleChange} />\r\n                    <CustomInput label=\"POS Button Label\" name=\"posButtonLabel\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"availableCategory\" options={categoryDropdown} data={data} onChange={handleChange} />\r\n                    <CustomTextArea name=\"description\" maxLength=\"266\" data={data} onChange={handleChange} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Catalog Items\">\r\n                <CustomGridLayout></CustomGridLayout>\r\n            </CustomCard>\r\n\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default CategoriesForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","yesNoOptions","name","value","amountTypeOptions","bonusTypeConstantsOptions","CommissionGpTypeOptions","map","durationOptions","toUpperCase","servicesOptions","checkInLimitOptions","i","option","concat","push","perOptions","restrictionOptions","daysOptions","hoursOptions","reasonCodeTypeOptions","classesPayTypeOptions","substitutionPriorityOptions","AppointmentPayPriorityOptions","EmployeeCommissionType","CategoriesForm","id","useParams","dispatch","useDispatch","categoryDropdown","useSelector","state","category","loading","setLoading","useState","useEffect","getCategory","data","setData","displayInPos","toString","posButtonLabel","availableCategory","description","isActive","handleChange","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","label","options","CustomTextArea","maxLength","CustomInputSwitch","CustomButtonGroup","PrimaryButton","handleSave","showFormErrors","editCategory","addCategory","LightButton"],"sourceRoot":""}