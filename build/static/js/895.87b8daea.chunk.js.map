{"version":3,"file":"static/js/895.87b8daea.chunk.js","mappings":"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","sources":["views/Settings/ScheduleSetup/EventClasses/EventClassesForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    CustomCalenderInput,\r\n    CustomCheckbox,\r\n    CustomDropDown,\r\n    CustomInputNumber,\r\n    CustomInputSwitch,\r\n    CustomMultiselect,\r\n} from '../../../../shared/Input/AllInputs';\r\nimport { WeekDaysOption, classMeet } from '../../../../utils/dropdownConstants';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { getEvents, getServicesEvents } from '../../../../redux/actions/Settings/ScheduleSetup/eventsActions';\r\nimport { convertToDateTime, showArrayFormErrors, showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { types } from '../../../../redux/types/types';\r\nimport { getLocations } from '../../../../redux/actions/Settings/ScheduleSetup/locationsActions';\r\nimport { addClasses, editClasses, getEventClass } from '../../../../redux/actions/Settings/ScheduleSetup/eventClassesAction';\r\nimport { getEmployeePay, getEmployees } from '../../../../redux/actions/Settings/Employee/employeesAction';\r\n\r\nconst EventClassesForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { id } = useParams();\r\n    const { employees, employeePayType } = useSelector((state) => state.settings.employee);\r\n\r\n    const [data, setData] = useState({\r\n        event: '',\r\n        classMeet: '',\r\n        classLocation: '',\r\n        startDate: '',\r\n        endDate: '',\r\n        schedule: [\r\n            {\r\n                days: [],\r\n                startTime: '',\r\n            },\r\n        ],\r\n        instructor: [\r\n            {\r\n                assistant: null,\r\n                assistantPay: '',\r\n            },\r\n        ],\r\n        staff: null,\r\n        payType: '',\r\n        totalCapacity: null,\r\n        waitlistPeople: null,\r\n        clientSignupClass: false,\r\n        onlineCapacity: null,\r\n        clientPaylater: false,\r\n        clientClassFree: false,\r\n        isActive: true,\r\n    });\r\n    useEffect(() => {\r\n        dispatch(getLocations());\r\n        dispatch(getEvents());\r\n        dispatch(getEmployees());\r\n    }, [dispatch]);\r\n    const { locationDropdown } = useSelector((state) => state.settings.schedule);\r\n    const { eventClassesDropDown } = useSelector((state) => state.settings.schedule);\r\n\r\n    let { eventClasses } = useSelector((state) => state.settings.schedule);\r\n    eventClasses = eventClasses?.find((item) => item._id === data?.event);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (data?.event) {\r\n            setData((prev) => ({ ...prev, totalCapacity: eventClasses?.defaultMaxAttendes, waitlistPeople: eventClasses?.maximumWaitlist }));\r\n        }\r\n    }, [data?.event, eventClasses]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getEventClass(id, (data) => {\r\n                    if (data?.staff) {\r\n                        dispatch(getEmployeePay(data?.staff));\r\n                    }\r\n                    setData({\r\n                        event: data.event,\r\n                        classMeet: data.classMeet,\r\n                        classLocation: data.classLocation,\r\n                        startDate: new Date(data.startDate),\r\n                        endDate: new Date(data.endDate),\r\n                        schedule: data.schedule?.map((item) => ({ ...item, startTime: convertToDateTime(item.startTime) })),\r\n                        instructor: data.instructor,\r\n                        staff: data.staff ? data?.staff : null,\r\n                        payType: data.pay,\r\n                        totalCapacity: data.totalCapacity ? data.totalCapacity : eventClasses?.defaultMaxAttendes,\r\n                        waitlistPeople: data.waitlistPeople ? data.waitlistPeople : eventClasses?.maximumWaitlist,\r\n                        clientSignupClass: data.clientSignupClass,\r\n                        onlineCapacity: data.onlineCapacity,\r\n                        clientPaylater: data.clientPaylater,\r\n                        clientClassFree: data.clientClassFree,\r\n                        isActive: data.isActive,\r\n                    });\r\n                    if (data.instructor && data.instructor.length > 0) {\r\n                        for (const instructorItem of data.instructor) {\r\n                            fetchAssistantPayOptions(instructorItem.assistant);\r\n                        }\r\n                    }\r\n                }),\r\n            );\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [id, dispatch, employees, eventClasses]);\r\n\r\n    const fetchAssistantPayOptions = async (assistantId) => {\r\n        const employeeWithLevel = employees.find((employee) => employee._id === assistantId);\r\n        if (employeeWithLevel) {\r\n            const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n            const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n            const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n\r\n            setData((prev) => ({\r\n                ...prev,\r\n                instructor: prev.instructor.map((inst) =>\r\n                    inst.assistant === assistantId\r\n                        ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : inst.assistantPay }\r\n                        : inst,\r\n                ),\r\n            }));\r\n        }\r\n    };\r\n\r\n    const loading = useSelector((state) => state?.loader?.isLoading);\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data?.event) {\r\n            dispatch(getServicesEvents(data?.event));\r\n            setData((prev) => ({\r\n                ...prev,\r\n                staff: null,\r\n                payType: '',\r\n                instructor: [\r\n                    {\r\n                        assistant: null,\r\n                        assistantPay: '',\r\n                    },\r\n                ],\r\n            }));\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [data?.event]);\r\n\r\n    const handleAddSchedule = () => {\r\n        const newSchedule = {\r\n            days: [],\r\n            startTime: '',\r\n            timeFormat: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            schedule: [...prevData.schedule, newSchedule],\r\n        }));\r\n    };\r\n    const handleAddAssistant = () => {\r\n        const newAssistant = {\r\n            assistant: '',\r\n            assistantPay: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            instructor: [...prevData.instructor, newAssistant],\r\n        }));\r\n    };\r\n    const { servicesEvents } = useSelector((state) => state.settings.schedule);\r\n\r\n    const eventLevels = servicesEvents && servicesEvents?.EventService?.map((item) => item.eventLevel?._id);\r\n\r\n    const employeesWithLevel = employees\r\n        .filter((employee) => {\r\n            return employee.employeeClassData.some((classData) => eventLevels?.includes(classData.isClassLevel));\r\n        })\r\n        .map((employee) => ({\r\n            name: employee.firstName,\r\n            value: employee._id,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        if (data?.staff) {\r\n            dispatch(getEmployeePay(data?.staff));\r\n        }\r\n        return () => {\r\n            dispatch({\r\n                type: types.CHANGE_EMPLOYEES_PAY_TYPE,\r\n                payload: [],\r\n            });\r\n        };\r\n    }, [data?.staff, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (employeePayType) {\r\n            let defaultPay = employeePayType?.employeeClassData?.find((item) => item.isDefaultPay);\r\n            setData((prev) => ({ ...prev, payType: defaultPay ? defaultPay.payType : null }));\r\n        }\r\n    }, [employeePayType, employees]);\r\n\r\n    const handleChangeDynamicField = async ({ name, value, customIndex, fieldName }) => {\r\n        const _newData = { ...data };\r\n        let obj = _newData[fieldName][customIndex];\r\n        obj[name] = value;\r\n\r\n        if (name === 'assistant') {\r\n            _newData[fieldName][customIndex] = obj;\r\n            setData(() => ({\r\n                ..._newData,\r\n            }));\r\n            await dispatch(getEmployeePay(value));\r\n        }\r\n\r\n        const formErrors = formValidation(name, value, obj);\r\n        obj.formErrors = formErrors;\r\n        _newData[fieldName][customIndex] = obj;\r\n        setData(() => ({\r\n            ..._newData,\r\n        }));\r\n\r\n        if (name === 'assistant') {\r\n            const selectedAssistant = value;\r\n            const employeeWithLevel = employees.find((employee) => employee._id === selectedAssistant);\r\n\r\n            if (employeeWithLevel) {\r\n                const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n                const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n                const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n                setData((prev) => ({\r\n                    ...prev,\r\n                    instructor: prev.instructor.map((inst, idx) =>\r\n                        idx === customIndex\r\n                            ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : null }\r\n                            : inst,\r\n                    ),\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    // const handleChangeDynamicField = ({ name, value, customIndex, fieldName }) => {\r\n    //     const _newData = { ...data };\r\n    //     let obj = _newData[fieldName][customIndex];\r\n    //     obj[name] = value;\r\n    //     if (name === 'assistant') {\r\n    //         _newData[fieldName][customIndex] = obj;\r\n    //         setData(() => ({\r\n    //             ..._newData,\r\n    //         }));\r\n    //         dispatch(getEmployeePay(value));\r\n    //     }\r\n    //     const formErrors = formValidation(name, value, obj);\r\n    //     obj.formErrors = formErrors;\r\n    //     _newData[fieldName][customIndex] = obj;\r\n    //     setData(() => ({\r\n    //         ..._newData,\r\n    //     }));\r\n    // };\r\n\r\n    // const getAvailableOptions = (index) => {\r\n    //     const selectedDays = data.schedule?.flatMap((item, idx) => (idx !== index ? item.days : []));\r\n    //     return WeekDaysOption.filter((day) => !selectedDays.includes(day.value));\r\n    // };\r\n\r\n    const getPayOptions = () => {\r\n        let payType = employeePayType?.employeeClassData?.map((item) => ({ name: item.label, value: item.payType }));\r\n        const uniqueOptionsSet = new Set(payType?.map((option) => JSON.stringify(option)));\r\n        const uniqueOptions = Array.from(uniqueOptionsSet)?.map((optionString) => JSON.parse(optionString));\r\n        return uniqueOptions;\r\n    };\r\n    const getAssistantOptions = (index) => {\r\n        const existingAssistants = data.instructor.filter((_, idx) => idx !== index)?.flatMap((item) => item.assistant);\r\n        const optionsToExclude = [data.staff, ...existingAssistants];\r\n        return employeesWithLevel.filter((level) => !optionsToExclude.includes(level.value));\r\n    };\r\n\r\n    const handleRemove = (indexToRemove, fieldName) => {\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            [fieldName]: prevData[fieldName].filter((_, index) => index !== indexToRemove),\r\n        }));\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            let validatedSchedule = showArrayFormErrors(data.schedule);\r\n            if (!validatedSchedule.isValid) {\r\n                setData((prev) => ({ ...prev, schedule: validatedSchedule.data }));\r\n            }\r\n            if (validatedSchedule.isValid) {\r\n                if (id) {\r\n                    dispatch(editClasses(id, data, history));\r\n                } else {\r\n                    dispatch(addClasses(data, history));\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Classes\">\r\n                <CustomGridLayout>\r\n                    <CustomDropDown name=\"event\" label=\"Class Name\" options={eventClassesDropDown} onChange={handleChange} data={data} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} extraClassName=\"text-right\" />\r\n                </CustomGridLayout>\r\n                <CustomCard title=\"When and Where\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"classMeet\" label=\"How often does class meet?\" options={classMeet} onChange={handleChange} data={data} col=\"6\" />\r\n                        <CustomDropDown name=\"classLocation\" options={locationDropdown} onChange={handleChange} data={data} col=\"6\" />\r\n                        <CustomCalenderInput name=\"startDate\" onChange={handleChange} data={data} />\r\n                        <CustomCalenderInput name=\"endDate\" onChange={handleChange} data={data} disabled={!data?.startDate} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add New Schedule\" className=\"mx-2 \" onClick={handleAddSchedule} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.schedule?.map((scheduleItem, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                {/* <CustomInputTime\r\n                                    name=\"startTime\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    customIndex={index}\r\n                                /> */}\r\n                                <CustomCalenderInput\r\n                                    name=\"startTime\"\r\n                                    customIndex={index}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    timeOnly\r\n                                    placeholder=\"Select Time\"\r\n                                    hourFormat=\"12\"\r\n                                />\r\n                                <CustomMultiselect\r\n                                    name=\"days\"\r\n                                    customIndex={index}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    options={WeekDaysOption}\r\n                                    fieldName=\"schedule\"\r\n                                    col={4}\r\n                                />\r\n                                {index > 0 && <i className=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'schedule')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Instructor\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"staff\" options={employeesWithLevel} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"payType\" options={getPayOptions()} onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add Assistant\" className=\"mx-2\" onClick={handleAddAssistant} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.instructor?.map((inst, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                <CustomDropDown\r\n                                    name=\"assistant\"\r\n                                    customIndex={index}\r\n                                    options={getAssistantOptions(index)}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                <CustomDropDown\r\n                                    name=\"assistantPay\"\r\n                                    customIndex={index}\r\n                                    options={inst.assistantPayOptions}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                {index > 0 && <i className=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'instructor')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Participants\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomInputNumber name=\"totalCapacity\" onChange={handleChange} data={data} />\r\n                        <CustomInputNumber name=\"waitlistPeople\" label=\"How many people can waitlist\" onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Online Scheduling\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox\r\n                            name=\"clientSignupClass\"\r\n                            label=\"Allow clients to sign up for this class online\"\r\n                            onChange={handleChange}\r\n                            data={data}\r\n                            col=\"12\"\r\n                        />\r\n                        <CustomInputNumber name=\"onlineCapacity\" label=\"Online Capacity\" onChange={handleChange} data={data} col=\"6\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Pricing\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox name=\"clientPaylater\" label=\"Allow clients to sign up now and pay later\" onChange={handleChange} data={data} col=\"12\" />\r\n                        <CustomCheckbox name=\"clientClassFree\" label=\"Clients can attend this class for free\" onChange={handleChange} data={data} col=\"12\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EventClassesForm;\r\n"],"names":["EventClassesForm","_eventClasses","_servicesEvents$Event","_data$schedule2","_data$instructor","dispatch","useDispatch","id","useParams","employees","employeePayType","useSelector","state","settings","employee","data","setData","useState","event","classMeet","classLocation","startDate","endDate","schedule","days","startTime","instructor","assistant","assistantPay","staff","payType","totalCapacity","waitlistPeople","clientSignupClass","onlineCapacity","clientPaylater","clientClassFree","isActive","useEffect","getLocations","getEvents","getEmployees","locationDropdown","eventClassesDropDown","eventClasses","find","item","_id","history","useHistory","prev","_eventClasses2","_eventClasses3","defaultMaxAttendes","maximumWaitlist","getEventClass","_data$schedule","_eventClasses4","_eventClasses5","getEmployeePay","Date","map","convertToDateTime","pay","length","instructorItem","fetchAssistantPayOptions","async","employeeWithLevel","assistantId","_employeeWithLevel$em","uniquePayTypeOptions","employeeClassData","name","label","value","filter","option","index","self","findIndex","t","defaultPay","isDefaultPay","inst","assistantPayOptions","loading","_state$loader","loader","isLoading","handleChange","_ref","formErrors","formValidation","getServicesEvents","servicesEvents","eventLevels","EventService","_item$eventLevel","eventLevel","employeesWithLevel","some","classData","includes","isClassLevel","firstName","type","types","CHANGE_EMPLOYEES_PAY_TYPE","payload","_employeePayType$empl","handleChangeDynamicField","customIndex","fieldName","_ref2","_newData","obj","selectedAssistant","_employeeWithLevel$em2","idx","getAssistantOptions","_data$instructor$filt","existingAssistants","_","flatMap","optionsToExclude","level","handleRemove","indexToRemove","prevData","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomGridLayout","CustomDropDown","options","onChange","CustomInputSwitch","extraClassName","CustomCard","title","col","CustomCalenderInput","disabled","extraClass","PrimaryButton","className","onClick","handleAddSchedule","newSchedule","timeFormat","scheduleItem","timeOnly","placeholder","hourFormat","CustomMultiselect","WeekDaysOption","getPayOptions","_employeePayType$empl2","_Array$from","uniqueOptionsSet","Set","JSON","stringify","Array","from","optionString","parse","handleAddAssistant","newAssistant","CustomInputNumber","CustomCheckbox","CustomButtonGroup","handleSave","showFormErrors","validatedSchedule","showArrayFormErrors","isValid","editClasses","addClasses","LightButton","goBack"],"sourceRoot":""}