{"version":3,"file":"static/js/67.9eb6e872.chunk.js","mappings":"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","sources":["shared/Layout/FormPage.jsx","views/Settings/MembersSetup/Resources/ResourcesForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { getResourceTypes } from '../../../../redux/actions/MembersSettings/resourceType';\r\nimport { addResource, editResource, getResource } from '../../../../redux/actions/MembersSettings/resources';\r\nimport { getLocations } from '../../../../redux/actions/ScheduleSettings/locationsActions';\r\nimport { hoursOptions } from '../../../../utils/dropdownConstants';\r\n\r\nconst ResourcesForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        dispatch(getResourceTypes());\r\n        dispatch(getLocations());\r\n    }, [dispatch]);\r\n    const { locationDropdown } = useSelector((state) => state.locations);\r\n    const { resourceTypeDropdown } = useSelector((state) => state.resourceType);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getResource(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        resourceType: data.resourceType,\r\n                        location: data.location,\r\n                        availableQuantity: data.availableQuantity,\r\n                        usedInEvents: data.usedInEvents,\r\n                        pastDue: data.pastDue,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        resourceType: '',\r\n        location: '',\r\n        availableQuantity: '',\r\n        usedInEvents: '',\r\n        pastDue: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editResource(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addResource(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Resources\">\r\n            <CustomCard col=\"12\" title=\"Resource\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"resourceType\" options={resourceTypeDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"location\" options={locationDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"availableQuantity\" data={data} onChange={handleChange} />\r\n                    <CustomInput name=\"usedInEvents\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"pastDue\" options={hoursOptions} data={data} onChange={handleChange} required />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default ResourcesForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","ResourcesForm","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","getResourceTypes","getLocations","locationDropdown","useSelector","state","locations","resourceTypeDropdown","resourceType","getResource","data","setData","name","location","availableQuantity","usedInEvents","pastDue","isActive","handleChange","value","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","hoursOptions","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","handleSave","showFormErrors","editResource","addResource","LightButton"],"sourceRoot":""}