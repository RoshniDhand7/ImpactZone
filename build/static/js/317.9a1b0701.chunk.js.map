{"version":3,"file":"static/js/317.9a1b0701.chunk.js","mappings":"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","sources":["shared/Layout/FormPage.jsx","views/Settings/MembersSetup/Campaigns/CompaignsForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { getCampaignsGroups } from '../../../../redux/actions/MembersSettings/compaignsGroup';\r\nimport { addCampaign, editCampaign, getCampaign } from '../../../../redux/actions/MembersSettings/campaigns';\r\n\r\nconst CompaignsForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        dispatch(getCampaignsGroups());\r\n    }, [dispatch]);\r\n\r\n    const { allCompaignGroups, compaignGroupDropdown } = useSelector((state) => state.compaignGroups);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getCampaign(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        campaignGroup: data.campaignGroup,\r\n                        description: data.description,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        campaignGroup: '',\r\n        description: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editCampaign(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addCampaign(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Campaigns\">\r\n            <CustomCard col=\"12\" title=\"Add Campaign Details\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"campaignGroup\" options={compaignGroupDropdown} data={data} onChange={handleChange} required />\r\n                    <CustomTextArea name=\"description\" maxLength=\"256\" data={data} onChange={handleChange} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default CompaignsForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","CompaignsForm","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","getCampaignsGroups","allCompaignGroups","compaignGroupDropdown","useSelector","state","compaignGroups","getCampaign","data","setData","name","campaignGroup","description","isActive","handleChange","value","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","CustomTextArea","maxLength","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","handleSave","showFormErrors","editCampaign","addCampaign","LightButton"],"sourceRoot":""}