{"version":3,"file":"static/js/993.ceb0a587.chunk.js","mappings":"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","sources":["views/Settings/Agreement/AssessedFees/AssessedFeesForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { CustomCalenderInput, CustomDropDown, CustomInput, CustomInputNumber, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { assessedTypeOptions, daysOptions, declineDaysOptions, preferedDueDay, yesNoOptions } from '../../../../utils/dropdownConstants';\r\nimport CustomPickList from '../../../../shared/Input/CustomPickList';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport useGetClubs from '../../../../hooks/useGetClubs';\r\nimport { addAssessedFee, editAssessedFee, getAssessedFee } from '../../../../redux/actions/Settings/AgreementSetup/assessedFeeAction';\r\nimport { getProfitCenters } from '../../../../redux/actions/Settings/InventorySetup/profitCenterAction';\r\n\r\nconst AssessedFeesForm = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        dispatch(getProfitCenters());\r\n    }, [dispatch]);\r\n    const { clubsDropdown } = useGetClubs();\r\n\r\n    const { profitCenterDropdown } = useSelector((state) => state.profitCenter);\r\n    const { loading } = useSelector((state) => state?.loader?.isLoading);\r\n    const initialState = {\r\n        name: '',\r\n        isActive: true,\r\n        type: 'ANNUAL_FEE',\r\n        profitCenter: '',\r\n        amount: 0,\r\n        recurring: false,\r\n        membershipPlan: [],\r\n        dueDateDeterminedBy: 'MONTH_AND_DAY',\r\n        noOfDays: 1,\r\n        preferredDate: new Date(),\r\n        clubs: [],\r\n    };\r\n\r\n    const [data, setData] = useState(initialState);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getAssessedFee(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        isActive: data.isActive,\r\n                        type: data.type,\r\n                        profitCenter: data.profitCenter,\r\n                        amount: data.amount,\r\n                        recurring: data.recurring,\r\n                        membershipPlan: data.membershipPlan,\r\n                        dueDateDeterminedBy: data.dueDateDeterminedBy,\r\n                        noOfDays: data.noOfDays,\r\n                        preferredDate: new Date(data.preferredDate),\r\n                        clubs: data.clubs,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n\r\n    const onSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(\r\n                    editAssessedFee(id, data, () => {\r\n                        history.goBack();\r\n                    }),\r\n                );\r\n            } else {\r\n                dispatch(\r\n                    addAssessedFee(data, () => {\r\n                        history.goBack();\r\n                    }),\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Assessed Fee\">\r\n                <CustomCard col=\"12\" title=\"General\">\r\n                    <CustomGridLayout>\r\n                        <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                        <CustomDropDown name=\"type\" options={assessedTypeOptions} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"profitCenter\" options={profitCenterDropdown} onChange={handleChange} data={data} required />\r\n                        <CustomInputNumber name=\"amount\" options={yesNoOptions} onChange={handleChange} data={data} required maxFractionDigits={4} />\r\n                        {(data?.type === 'ANNUAL_FEE' || data?.type === 'FREEZE_FEE') && (\r\n                            <CustomDropDown name=\"recurring\" options={yesNoOptions} onChange={handleChange} data={data} />\r\n                        )}\r\n                        <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                {data?.type === 'ANNUAL_FEE' && (\r\n                    <CustomCard col=\"12\" title=\"Preferred Due Date\">\r\n                        <CustomGridLayout>\r\n                            <CustomDropDown\r\n                                name=\"dueDateDeterminedBy\"\r\n                                label=\"Choose how the prefered due day will be determined\"\r\n                                options={preferedDueDay}\r\n                                onChange={handleChange}\r\n                                data={data}\r\n                            />\r\n                            {data?.dueDateDeterminedBy === 'SPECIFIC_DATE' ? (\r\n                                <CustomCalenderInput name=\"preferredDate\" onChange={handleChange} data={data} />\r\n                            ) : (\r\n                                <CustomDropDown name=\"noOfDays\" options={daysOptions} onChange={handleChange} data={data} />\r\n                            )}\r\n                        </CustomGridLayout>\r\n                    </CustomCard>\r\n                )}\r\n                {(data?.type === 'LATE_FEE' || data?.type === 'DECLINE_FEE') && (\r\n                    <CustomCard col=\"12\" title=\"Preferred Due Date\">\r\n                        <CustomGridLayout>\r\n                            <CustomDropDown\r\n                                name=\"noOfDays\"\r\n                                label=\"Choose how the prefered due day will be determined\"\r\n                                options={data?.type === 'LATE_FEE' ? daysOptions : declineDaysOptions}\r\n                                onChange={handleChange}\r\n                                data={data}\r\n                            />\r\n                        </CustomGridLayout>\r\n                    </CustomCard>\r\n                )}\r\n                <CustomCard col=\"12\" title=\" Clubs\">\r\n                    <CustomPickList name=\"clubs\" selected={data?.clubs} sourceData={clubsDropdown} onPickListChange={handleChange} />\r\n                </CustomCard>\r\n                {data?.type === 'ANNUAL_FEE' && (\r\n                    <CustomCard col=\"12\" title=\"Membership Plans\">\r\n                        <CustomPickList name=\"membershipPlan\" selected={data?.membershipPlan} sourceData={[]} onPickListChange={handleChange} />\r\n                    </CustomCard>\r\n                )}\r\n\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={onSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AssessedFeesForm;\r\n"],"names":["AssessedFeesForm","dispatch","useDispatch","history","useHistory","id","useParams","useEffect","getProfitCenters","clubsDropdown","useGetClubs","profitCenterDropdown","useSelector","state","profitCenter","loading","_state$loader","loader","isLoading","initialState","name","isActive","type","amount","recurring","membershipPlan","dueDateDeterminedBy","noOfDays","preferredDate","Date","clubs","data","setData","useState","getAssessedFee","handleChange","_ref","value","formErrors","formValidation","prev","_objectSpread","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","assessedTypeOptions","CustomInputNumber","yesNoOptions","maxFractionDigits","CustomInputSwitch","label","preferedDueDay","CustomCalenderInput","daysOptions","declineDaysOptions","CustomPickList","selected","sourceData","onPickListChange","CustomButtonGroup","PrimaryButton","className","onClick","onSave","showFormErrors","editAssessedFee","goBack","addAssessedFee","LightButton"],"sourceRoot":""}