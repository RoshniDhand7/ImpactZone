{"version":3,"file":"static/js/993.08f9c57c.chunk.js","mappings":"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","sources":["views/Settings/Agreement/AssessedFees/AssessedFeesForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { CustomDropDown, CustomInput, CustomInputNumber, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport { getProfitCenters } from '../../../../redux/actions/InventorySettings/profitCenterAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AssessedTypeOptions, DeclinedaysOptions, daysOptions, monthDropdownOptions, preferedDueDay, yesNoOptions } from '../../../../utils/dropdownConstants';\r\nimport CustomPickList from '../../../../shared/Input/CustomPickList';\r\nimport { getClubs } from '../../../../redux/actions/BusinessSettings/clubsAction';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addAssessedFees, editAssessedFees, getAssesedFees, getAssessedFee } from '../../../../redux/actions/AgreementSettings/assessedFees';\r\n\r\nconst AssessedFeesForm = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        dispatch(getProfitCenters());\r\n        dispatch(getClubs());\r\n    }, [dispatch]);\r\n\r\n    const { profitCenterDropdown } = useSelector((state) => state.profitCenter);\r\n    const { clubsDropdown } = useSelector((state) => state.clubs);\r\n    const { loading } = useSelector((state) => state?.loader?.isLoading);\r\n    const initialState = {\r\n        name: '',\r\n        isActive: true,\r\n        type: 'Annual Fee',\r\n        profitCenter: '',\r\n        amount: 0,\r\n        recurring: 'false',\r\n        membershipPlan: [],\r\n        preferedDueDate: 'Month and Day',\r\n        noOfDays: 0,\r\n        noOfMonths: 0,\r\n        clubs: [],\r\n    };\r\n\r\n    const [data, setData] = useState(initialState);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getAssessedFee(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        isActive: data.isActive,\r\n                        type: data.type,\r\n                        profitCenter: data.profitCenter,\r\n                        amount: data.amount,\r\n                        recurring: data.recurring,\r\n                        membershipPlan: data.membershipPlan,\r\n                        preferedDueDate: data.preferedDueDate,\r\n                        noOfDays: data.noOfDays,\r\n                        noOfMonths: data.noOfMonths,\r\n                        clubs: data.clubs,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        if (name === 'type') {\r\n            setData((prev) => ({\r\n                ...prev,\r\n                type: value,\r\n                profitCenter: '',\r\n                amount: 0,\r\n                recurring: 'false',\r\n                membershipPlan: [],\r\n                preferedDueDate: '',\r\n                noOfDays: 0,\r\n                noOfMonths: 0,\r\n                clubs: [],\r\n            }));\r\n        } else {\r\n            setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n        }\r\n    };\r\n\r\n    const onSave = () => {\r\n        let ignore = [];\r\n\r\n        switch (data?.type) {\r\n            case 'Annual Fee':\r\n                if (data?.preferedDueDate === 'Number of Days from Begin Date') {\r\n                    ignore = ['noOfMonths'];\r\n                }\r\n                break;\r\n            case 'Late Fee':\r\n            case 'Decline Fee':\r\n                ignore = ['noOfMonths'];\r\n                break;\r\n            default:\r\n                ignore = ['noOfDays', 'noOfMonths'];\r\n                break;\r\n        }\r\n\r\n        if (showFormErrors(data, setData, ignore)) {\r\n            if (id) {\r\n                dispatch(\r\n                    editAssessedFees(id, data, () => {\r\n                        dispatch(getAssesedFees());\r\n                        history.goBack();\r\n                    }),\r\n                );\r\n            } else {\r\n                dispatch(\r\n                    addAssessedFees(data, () => {\r\n                        dispatch(getAssesedFees());\r\n                        history.goBack();\r\n                    }),\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Assessed Fee\">\r\n                <CustomCard col=\"12\" title=\"General\">\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                    <CustomGridLayout>\r\n                        <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                        <CustomDropDown name=\"type\" options={AssessedTypeOptions} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"profitCenter\" options={profitCenterDropdown} onChange={handleChange} data={data} required />\r\n                        <CustomInputNumber\r\n                            name=\"amount\"\r\n                            options={yesNoOptions}\r\n                            onChange={handleChange}\r\n                            data={data}\r\n                            col=\"4\"\r\n                            required\r\n                            minFractionDigits={4}\r\n                            maxFractionDigits={4}\r\n                        />\r\n                        {(data?.type === 'Annual Fee' || data?.type === 'Freeze Fee') && (\r\n                            <CustomDropDown name=\"recurring\" options={yesNoOptions} onChange={handleChange} data={data} />\r\n                        )}\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                {data?.type === 'Annual Fee' && (\r\n                    <CustomCard col=\"12\" title=\"Preferred Due Date\">\r\n                        <CustomGridLayout>\r\n                            <CustomDropDown\r\n                                name=\"preferedDueDate\"\r\n                                label=\"Choose how the prefered due day will be determined\"\r\n                                options={preferedDueDay}\r\n                                onChange={handleChange}\r\n                                data={data}\r\n                            />\r\n                            {data?.preferedDueDate === 'Month and Day' ? (\r\n                                <>\r\n                                    <CustomDropDown name=\"noOfMonths\" options={monthDropdownOptions} onChange={handleChange} data={data} />\r\n                                    <CustomDropDown name=\"noOfDays\" options={daysOptions} onChange={handleChange} data={data} />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <CustomDropDown name=\"noOfDays\" options={daysOptions} onChange={handleChange} data={data} />\r\n                                </>\r\n                            )}\r\n                        </CustomGridLayout>\r\n                    </CustomCard>\r\n                )}\r\n                {(data?.type === 'Late Fee' || data?.type === 'Decline Fee') && (\r\n                    <CustomCard col=\"12\" title=\"Preferred Due Date\">\r\n                        <CustomGridLayout>\r\n                            <CustomDropDown\r\n                                name=\"noOfDays\"\r\n                                label=\"Choose how the prefered due day will be determined\"\r\n                                options={data?.type === 'Late Fee' ? daysOptions : DeclinedaysOptions}\r\n                                onChange={handleChange}\r\n                                data={data}\r\n                            />\r\n                        </CustomGridLayout>\r\n                    </CustomCard>\r\n                )}\r\n                <CustomCard col=\"12\" title=\" Clubs\">\r\n                    <CustomPickList name=\"clubs\" selected={data?.clubs} sourceData={clubsDropdown} onPickListChange={handleChange} />\r\n                </CustomCard>\r\n                {data?.type === 'Annual Fee' && (\r\n                    <CustomCard col=\"12\" title=\"Membership Plans\">\r\n                        <CustomPickList name=\"membershipPlan\" selected={data?.membershipPlan} sourceData={[]} onPickListChange={handleChange} />\r\n                    </CustomCard>\r\n                )}\r\n\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={onSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AssessedFeesForm;\r\n"],"names":["AssessedFeesForm","dispatch","useDispatch","history","useHistory","id","useParams","useEffect","getProfitCenters","getClubs","profitCenterDropdown","useSelector","state","profitCenter","clubsDropdown","clubs","loading","_state$loader","loader","isLoading","data","setData","useState","name","isActive","type","amount","recurring","membershipPlan","preferedDueDate","noOfDays","noOfMonths","getAssessedFee","handleChange","_ref","value","formErrors","formValidation","prev","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomCard","col","title","CustomInputSwitch","onChange","CustomGridLayout","CustomInput","required","CustomDropDown","options","AssessedTypeOptions","CustomInputNumber","yesNoOptions","minFractionDigits","maxFractionDigits","label","preferedDueDay","monthDropdownOptions","daysOptions","DeclinedaysOptions","CustomPickList","selected","sourceData","onPickListChange","CustomButtonGroup","PrimaryButton","className","onClick","onSave","ignore","showFormErrors","editAssessedFees","getAssesedFees","goBack","addAssessedFees","LightButton"],"sourceRoot":""}