{"version":3,"file":"static/js/895.588cea8c.chunk.js","mappings":"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","sources":["views/Settings/ScheduleSetup/EventClasses/EventClassesForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { CustomCalenderInput, CustomCheckbox, CustomDropDown, CustomInputNumber, CustomInputTime, CustomMultiselect } from '../../../../shared/Input/AllInputs';\r\nimport { WeekDaysOption, classMeet, timePeriodFormatOptions } from '../../../../utils/dropdownConstants';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { getLocations } from '../../../../redux/actions/ScheduleSettings/locationsActions';\r\nimport { getEvents, getServicesEvents } from '../../../../redux/actions/ScheduleSettings/eventsActions';\r\nimport { convertToDateTime, showArrayFormErrors, showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { getEmployeePay, getEmployees } from '../../../../redux/actions/EmployeeSettings/employeesAction';\r\nimport { addClasses, editClasses, getEventClass } from '../../../../redux/actions/ScheduleSettings/eventClassesAction';\r\nimport { types } from '../../../../redux/types/types';\r\n\r\nconst EventClassesForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { id } = useParams();\r\n    const { allEmployees, employeePayType } = useSelector((state) => state.employees);\r\n\r\n    const [data, setData] = useState({\r\n        event: '',\r\n        classMeet: '',\r\n        classLocation: '',\r\n        startDate: '',\r\n        endDate: '',\r\n        schedule: [\r\n            {\r\n                days: [],\r\n                startTime: '',\r\n            },\r\n        ],\r\n        instructor: [\r\n            {\r\n                assistant: null,\r\n                assistantPay: '',\r\n            },\r\n        ],\r\n        staff: '',\r\n        payType: '',\r\n        totalCapacity: null,\r\n        waitlistPeople: null,\r\n        clientSignupClass: false,\r\n        onlineCapacity: null,\r\n        clientPaylater: false,\r\n        clientClassFree: false,\r\n    });\r\n    useEffect(() => {\r\n        dispatch(getLocations());\r\n        dispatch(getEvents());\r\n        dispatch(getEmployees());\r\n    }, [dispatch]);\r\n    const { locationDropdown } = useSelector((state) => state.locations);\r\n    const { allEventClassesDropDown } = useSelector((state) => state.event);\r\n\r\n    let { allEventClasses } = useSelector((state) => state.event);\r\n    allEventClasses = allEventClasses?.find((item) => item._id === data?.event);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (data?.event) {\r\n            setData((prev) => ({ ...prev, totalCapacity: allEventClasses?.defaultMaxAttendes, waitlistPeople: allEventClasses?.maximumWaitlist }));\r\n        }\r\n    }, [data?.event, allEventClasses]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getEventClass(id, (data) => {\r\n                    dispatch(getEmployeePay(data?.staff));\r\n                    setData({\r\n                        event: data.event,\r\n                        classMeet: data.classMeet,\r\n                        classLocation: data.classLocation,\r\n                        startDate: new Date(data.startDate),\r\n                        endDate: new Date(data.endDate),\r\n                        schedule: data.schedule?.map((item) => ({ ...item, startTime: convertToDateTime(item.startTime) })),\r\n                        instructor: data.instructor,\r\n                        staff: data.staff,\r\n                        payType: data.pay,\r\n                        totalCapacity: data.totalCapacity ? data.totalCapacity : allEventClasses?.defaultMaxAttendes,\r\n                        waitlistPeople: data.waitlistPeople ? data.waitlistPeople : allEventClasses?.maximumWaitlist,\r\n                        clientSignupClass: data.clientSignupClass,\r\n                        onlineCapacity: data.onlineCapacity,\r\n                        clientPaylater: data.clientPaylater,\r\n                        clientClassFree: data.clientClassFree,\r\n                    });\r\n                    if (data.instructor && data.instructor.length > 0) {\r\n                        for (const instructorItem of data.instructor) {\r\n                            fetchAssistantPayOptions(instructorItem.assistant);\r\n                        }\r\n                    }\r\n                }),\r\n            );\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [id, dispatch, allEmployees, allEventClasses]);\r\n\r\n    const fetchAssistantPayOptions = async (assistantId) => {\r\n        const employeeWithLevel = allEmployees.find((employee) => employee._id === assistantId);\r\n        if (employeeWithLevel) {\r\n            const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n            const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n            const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n\r\n            setData((prev) => ({\r\n                ...prev,\r\n                instructor: prev.instructor.map((inst) =>\r\n                    inst.assistant === assistantId\r\n                        ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : inst.assistantPay }\r\n                        : inst,\r\n                ),\r\n            }));\r\n        }\r\n    };\r\n\r\n    const loading = useSelector((state) => state?.loader?.isLoading);\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n\r\n    console.log('allClasses>>', allEventClasses);\r\n\r\n    useEffect(() => {\r\n        if (data?.event) {\r\n            dispatch(getServicesEvents(data?.event));\r\n            setData((prev) => ({\r\n                ...prev,\r\n                staff: '',\r\n                payType: '',\r\n                instructor: [\r\n                    {\r\n                        assistant: null,\r\n                        assistantPay: '',\r\n                    },\r\n                ],\r\n            }));\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [data?.event]);\r\n\r\n    const handleAddSchedule = () => {\r\n        const newSchedule = {\r\n            days: [],\r\n            startTime: '',\r\n            timeFormat: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            schedule: [...prevData.schedule, newSchedule],\r\n        }));\r\n    };\r\n    const handleAddAssistant = () => {\r\n        const newAssistant = {\r\n            assistant: '',\r\n            assistantPay: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            instructor: [...prevData.instructor, newAssistant],\r\n        }));\r\n    };\r\n    const { allServicesEvents } = useSelector((state) => state.event);\r\n\r\n    const eventLevels = allServicesEvents && allServicesEvents?.EventService?.map((item) => item.eventLevel?._id);\r\n\r\n    const employeesWithLevel = allEmployees\r\n        .filter((employee) => {\r\n            return employee.employeeClassData.some((classData) => eventLevels?.includes(classData.isClassLevel));\r\n        })\r\n        .map((employee) => ({\r\n            name: employee.firstName,\r\n            value: employee._id,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        if (data?.staff) {\r\n            dispatch(getEmployeePay(data?.staff));\r\n        }\r\n        return () => {\r\n            dispatch({\r\n                type: types.CHANGE_EMPLOYEES_PAY_TYPE,\r\n                payload: [],\r\n            });\r\n        };\r\n    }, [data?.staff, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (employeePayType) {\r\n            let defaultPay = employeePayType?.employeeClassData?.find((item) => item.isDefaultPay);\r\n            setData((prev) => ({ ...prev, payType: defaultPay ? defaultPay.payType : null }));\r\n        }\r\n    }, [employeePayType, allEmployees]);\r\n\r\n    const handleChangeDynamicField = async ({ name, value, customIndex, fieldName }) => {\r\n        const _newData = { ...data };\r\n        let obj = _newData[fieldName][customIndex];\r\n        obj[name] = value;\r\n\r\n        if (name === 'assistant') {\r\n            _newData[fieldName][customIndex] = obj;\r\n            setData(() => ({\r\n                ..._newData,\r\n            }));\r\n            await dispatch(getEmployeePay(value));\r\n        }\r\n\r\n        const formErrors = formValidation(name, value, obj);\r\n        obj.formErrors = formErrors;\r\n        _newData[fieldName][customIndex] = obj;\r\n        setData(() => ({\r\n            ..._newData,\r\n        }));\r\n\r\n        if (name === 'assistant') {\r\n            const selectedAssistant = value;\r\n            const employeeWithLevel = allEmployees.find((employee) => employee._id === selectedAssistant);\r\n\r\n            if (employeeWithLevel) {\r\n                const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n                const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n                const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n                setData((prev) => ({\r\n                    ...prev,\r\n                    instructor: prev.instructor.map((inst, idx) =>\r\n                        idx === customIndex\r\n                            ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : null }\r\n                            : inst,\r\n                    ),\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    // const handleChangeDynamicField = ({ name, value, customIndex, fieldName }) => {\r\n    //     const _newData = { ...data };\r\n    //     let obj = _newData[fieldName][customIndex];\r\n    //     obj[name] = value;\r\n    //     if (name === 'assistant') {\r\n    //         _newData[fieldName][customIndex] = obj;\r\n    //         setData(() => ({\r\n    //             ..._newData,\r\n    //         }));\r\n    //         dispatch(getEmployeePay(value));\r\n    //     }\r\n    //     const formErrors = formValidation(name, value, obj);\r\n    //     obj.formErrors = formErrors;\r\n    //     _newData[fieldName][customIndex] = obj;\r\n    //     setData(() => ({\r\n    //         ..._newData,\r\n    //     }));\r\n    // };\r\n\r\n    const getAvailableOptions = (index) => {\r\n        const selectedDays = data.schedule?.flatMap((item, idx) => (idx !== index ? item.days : []));\r\n        return WeekDaysOption.filter((day) => !selectedDays.includes(day.value));\r\n    };\r\n\r\n    const getPayOptions = () => {\r\n        let payType = employeePayType?.employeeClassData?.map((item) => ({ name: item.label, value: item.payType }));\r\n        const uniqueOptionsSet = new Set(payType?.map((option) => JSON.stringify(option)));\r\n        const uniqueOptions = Array.from(uniqueOptionsSet)?.map((optionString) => JSON.parse(optionString));\r\n        return uniqueOptions;\r\n    };\r\n    const getAssistantOptions = (index) => {\r\n        const existingAssistants = data.instructor.filter((_, idx) => idx !== index)?.flatMap((item) => item.assistant);\r\n        const optionsToExclude = [data.staff, ...existingAssistants];\r\n        return employeesWithLevel.filter((level) => !optionsToExclude.includes(level.value));\r\n    };\r\n\r\n    const handleRemove = (indexToRemove, fieldName) => {\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            [fieldName]: prevData[fieldName].filter((_, index) => index !== indexToRemove),\r\n        }));\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            let validatedSchedule = showArrayFormErrors(data.schedule);\r\n            if (!validatedSchedule.isValid) {\r\n                setData((prev) => ({ ...prev, schedule: validatedSchedule.data }));\r\n            }\r\n            if (validatedSchedule.isValid) {\r\n                if (id) {\r\n                    dispatch(editClasses(id, data, history));\r\n                } else {\r\n                    dispatch(addClasses(data, history));\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    console.log('data,', data);\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Classes\">\r\n                <CustomGridLayout>\r\n                    <CustomDropDown name=\"event\" label=\"Class Name\" options={allEventClassesDropDown} onChange={handleChange} data={data} />\r\n                </CustomGridLayout>\r\n                <CustomCard title=\"When and Where\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"classMeet\" label=\"How often does class meet?\" options={classMeet} onChange={handleChange} data={data} col=\"6\" />\r\n                        <CustomDropDown name=\"classLocation\" options={locationDropdown} onChange={handleChange} data={data} col=\"6\" />\r\n                        <CustomCalenderInput name=\"startDate\" onChange={handleChange} data={data} />\r\n                        <CustomCalenderInput name=\"endDate\" onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add New Schedule\" className=\"mx-2 \" onClick={handleAddSchedule} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.schedule?.map((scheduleItem, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                {/* <CustomInputTime\r\n                                    name=\"startTime\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    customIndex={index}\r\n                                /> */}\r\n                                <CustomCalenderInput\r\n                                    name=\"startTime\"\r\n                                    customIndex={index}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    timeOnly\r\n                                    placeholder=\"Select Time\"\r\n                                    hourFormat=\"12\"\r\n                                />\r\n                                <CustomMultiselect\r\n                                    name=\"days\"\r\n                                    customIndex={index}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    options={WeekDaysOption}\r\n                                    fieldName=\"schedule\"\r\n                                    col={4}\r\n                                />\r\n                                {index > 0 && <i class=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'schedule')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Instructor\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"staff\" options={employeesWithLevel} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"payType\" options={getPayOptions()} onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add Assistant\" className=\"mx-2\" onClick={handleAddAssistant} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.instructor?.map((inst, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                <CustomDropDown\r\n                                    name=\"assistant\"\r\n                                    customIndex={index}\r\n                                    options={getAssistantOptions(index)}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                <CustomDropDown\r\n                                    name=\"assistantPay\"\r\n                                    customIndex={index}\r\n                                    options={inst.assistantPayOptions}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                {index > 0 && <i className=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'instructor')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Participants\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomInputNumber name=\"totalCapacity\" onChange={handleChange} data={data} />\r\n                        <CustomInputNumber name=\"waitlistPeople\" label=\"How many people can waitlist\" onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Online Scheduling\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox\r\n                            name=\"clientSignupClass\"\r\n                            label=\"Allow clients to sign up for this class online\"\r\n                            onChange={handleChange}\r\n                            data={data}\r\n                            col=\"12\"\r\n                        />\r\n                        <CustomInputNumber name=\"onlineCapacity\" label=\"Online Capacity\" onChange={handleChange} data={data} col=\"6\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Pricing\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox name=\"clientPaylater\" label=\"Allow clients to sign up now and pay later\" onChange={handleChange} data={data} col=\"12\" />\r\n                        <CustomCheckbox name=\"clientClassFree\" label=\"Clients can attend this class for free\" onChange={handleChange} data={data} col=\"12\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EventClassesForm;\r\n"],"names":["EventClassesForm","_allEventClasses","_allServicesEvents$Ev","_data$schedule3","_data$instructor","dispatch","useDispatch","id","useParams","allEmployees","employeePayType","useSelector","state","employees","data","setData","useState","event","classMeet","classLocation","startDate","endDate","schedule","days","startTime","instructor","assistant","assistantPay","staff","payType","totalCapacity","waitlistPeople","clientSignupClass","onlineCapacity","clientPaylater","clientClassFree","useEffect","getLocations","getEvents","getEmployees","locationDropdown","locations","allEventClassesDropDown","allEventClasses","find","item","_id","history","useHistory","prev","_allEventClasses2","_allEventClasses3","defaultMaxAttendes","maximumWaitlist","getEventClass","_data$schedule","_allEventClasses4","_allEventClasses5","getEmployeePay","Date","map","convertToDateTime","pay","length","instructorItem","fetchAssistantPayOptions","async","employeeWithLevel","employee","assistantId","_employeeWithLevel$em","uniquePayTypeOptions","employeeClassData","name","label","value","filter","option","index","self","findIndex","t","defaultPay","isDefaultPay","inst","assistantPayOptions","loading","_state$loader","loader","isLoading","handleChange","_ref","formErrors","formValidation","console","log","getServicesEvents","allServicesEvents","eventLevels","EventService","_item$eventLevel","eventLevel","employeesWithLevel","some","classData","includes","isClassLevel","firstName","type","types","CHANGE_EMPLOYEES_PAY_TYPE","payload","_employeePayType$empl","handleChangeDynamicField","customIndex","fieldName","_ref2","_newData","obj","selectedAssistant","_employeeWithLevel$em2","idx","getAssistantOptions","_data$instructor$filt","existingAssistants","_","flatMap","optionsToExclude","level","handleRemove","indexToRemove","prevData","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomGridLayout","CustomDropDown","options","onChange","CustomCard","title","col","CustomCalenderInput","extraClass","PrimaryButton","className","onClick","handleAddSchedule","newSchedule","timeFormat","scheduleItem","timeOnly","placeholder","hourFormat","CustomMultiselect","WeekDaysOption","class","getPayOptions","_employeePayType$empl2","_Array$from","uniqueOptionsSet","Set","JSON","stringify","Array","from","optionString","parse","handleAddAssistant","newAssistant","CustomInputNumber","CustomCheckbox","CustomButtonGroup","handleSave","showFormErrors","validatedSchedule","showArrayFormErrors","isValid","editClasses","addClasses","LightButton","goBack"],"sourceRoot":""}