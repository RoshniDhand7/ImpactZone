{"version":3,"file":"static/js/4.8105b36b.chunk.js","mappings":"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","sources":["utils/fileHelper.js","views/Plans/SellPlanForm/PlanAgreement/SubscriptionPlanAgreement.jsx"],"sourcesContent":["const base64ToBlob = (base64, mime) => {\r\n    const byteCharacters = atob(base64);\r\n    const byteNumbers = new Array(byteCharacters.length);\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    return new Blob([byteArray], { type: mime });\r\n};\r\nconst blobToFile = (blob, fileName) => {\r\n    return new File([blob], fileName, { type: blob.type, lastModified: Date.now() });\r\n};\r\nexport const base64ToFile = (base64, mime, fileName) => {\r\n    const blob = base64ToBlob(base64, mime);\r\n    return blobToFile(blob, fileName);\r\n};\r\n","import React, { useState, useRef } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport SignaturePad from 'react-signature-canvas';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport domToPdf from 'dom-to-pdf';\r\nimport CustomDialog from '../../../../shared/Overlays/CustomDialog';\r\nimport dummy from '../../../../assets/images/signature.png';\r\n\r\nimport CustomCard, { CustomColLayout, CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup } from '../../../../shared/Button/CustomButton';\r\nimport { getSubscriptionAgreementDetails, signSubscriptionAgreement } from '../../../../redux/actions/Plans/plansActions';\r\nimport { base64ToFile } from '../../../../utils/fileHelper';\r\nimport { getImageURL } from '../../../../utils/imageUrl';\r\nimport { CustomCheckbox } from '../../../../shared/Input/AllInputs';\r\nimport moment from 'moment';\r\n\r\nexport default function SubscriptionPlanAgreement() {\r\n    const history = useHistory();\r\n    const templateRef = useRef();\r\n    const signRef = useRef();\r\n    const dispatch = useDispatch();\r\n    const { subscriptionPlanId } = useParams();\r\n    const [loading, setLoading] = useState(false);\r\n    const [copyToAll, setCopyToAll] = useState(false);\r\n    const [openSignatureModal, setOpenSignatureModal] = useState(null);\r\n    const [signatures, setSignatures] = useState([]);\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getSubscriptionAgreementDetails(subscriptionPlanId, setLoading, (e) => {\r\n                setData({ ...e, htmlContent: replaceWithImage(e?.htmlContent, '{{MEMBER_SIGNATURE}}') });\r\n                let _signatures = getPlaceholderUrls(e?.htmlContent, '{{MEMBER_SIGNATURE}}');\r\n                if (e?.signatures.length) {\r\n                    setSignatures(e?.signatures);\r\n                } else {\r\n                    setSignatures(_signatures);\r\n                }\r\n            }),\r\n        );\r\n    }, [dispatch]);\r\n\r\n    function getPlaceholderUrls(template, placeholder) {\r\n        const regex = new RegExp(placeholder, 'g');\r\n        const matches = [...template.matchAll(regex)];\r\n        return matches.map(() => ({\r\n            url: '',\r\n            error: false,\r\n        }));\r\n    }\r\n\r\n    function replaceWithImage(template, placeholder) {\r\n        let occurrence = 0;\r\n        return template.replace(new RegExp(placeholder, 'g'), () => {\r\n            occurrence += 1;\r\n            return `<img id=\"signature-${occurrence}\" alt=\"signature-${occurrence}\" style=\"max-height: 100px; max-width: 300px\" />`;\r\n        });\r\n    }\r\n\r\n    const onOpenSignatureModel = (i) => {\r\n        setOpenSignatureModal(i + 1);\r\n    };\r\n    const onCloseSignatureModel = () => {\r\n        setOpenSignatureModal(null);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (signRef.current) {\r\n            let isEmpty = signRef.current.isEmpty();\r\n            let file = '';\r\n\r\n            if (!isEmpty) {\r\n                let dataURL = signRef.current.getTrimmedCanvas().toDataURL('image/png');\r\n                dataURL = dataURL.split(',')[1];\r\n                const mimeType = 'image/png';\r\n                const fileName = `signature_${openSignatureModal}.png`;\r\n                file = base64ToFile(dataURL, mimeType, fileName);\r\n            }\r\n            let _signatures = [...signatures];\r\n            if (copyToAll) {\r\n                _signatures = _signatures.map(() => ({ url: file, error: false }));\r\n            } else {\r\n                _signatures[openSignatureModal - 1].url = file;\r\n                _signatures[openSignatureModal - 1].error = false;\r\n            }\r\n            setSignatures(_signatures);\r\n            onCloseSignatureModel();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        signatures.forEach((item, i) => {\r\n            let imgElement = document.getElementById(`signature-${i + 1}`);\r\n            imgElement.src = getImageURL(item?.url);\r\n        });\r\n    }, [signatures]);\r\n\r\n    const handleClearSign = () => {\r\n        signRef.current.clear();\r\n    };\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => templateRef.current,\r\n        documentTitle: 'Visitor Pass',\r\n        onAfterPrint: () => console.log('Printed PDF successfully!'),\r\n    });\r\n\r\n    const handleDownloadPdf = async () => {\r\n        let { subscription } = data;\r\n        let { member, company } = subscription;\r\n        setLoading(true);\r\n        const elementToPrint = document.getElementById('agreement-template');\r\n        const options = {\r\n            filename: `${member?.firstName}-${member?.lastName}-${company?.companyName}(${moment().format('ll')}).pdf`,\r\n            jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' },\r\n            html2canvas: {\r\n                scale: 2,\r\n            },\r\n        };\r\n        const wrapper = document.createElement('div');\r\n        wrapper.appendChild(elementToPrint.cloneNode(true));\r\n        document.body.appendChild(wrapper);\r\n        await new Promise((resolve) => {\r\n            domToPdf(wrapper, options, () => {\r\n                document.body.removeChild(wrapper);\r\n                setLoading(false);\r\n                resolve();\r\n            });\r\n        });\r\n    };\r\n\r\n    const [isSubmitLoading, setSubmitLoading] = useState(false);\r\n\r\n    const onSubmit = () => {\r\n        if (data?.isSigned) {\r\n            return;\r\n        }\r\n        let isValid = true;\r\n        let _signatures = signatures.map((item) => {\r\n            if (!item.url) {\r\n                isValid = false;\r\n                return { ...item, error: true };\r\n            } else {\r\n                return item;\r\n            }\r\n        });\r\n\r\n        if (isValid) {\r\n            dispatch(\r\n                signSubscriptionAgreement(subscriptionPlanId, data, signatures, setSubmitLoading, () => {\r\n                    history.push('/plans');\r\n                }),\r\n            );\r\n        } else {\r\n            setSignatures(_signatures);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <CustomCard col=\"12\" title=\"Subscription Agreement\">\r\n                <CustomGridLayout>\r\n                    <CustomColLayout size={9}>\r\n                        <div className=\"overflow-auto bg-white border-round-sm p-2 h-screen\">\r\n                            <div ref={templateRef} id=\"agreement-template\" className=\"p-2\">\r\n                                <div dangerouslySetInnerHTML={{ __html: data?.htmlContent }}></div>\r\n                                <style dangerouslySetInnerHTML={{ __html: data?.cssContent }}></style>\r\n                            </div>\r\n                        </div>\r\n                    </CustomColLayout>\r\n                    <CustomColLayout size={3}>\r\n                        <CustomButtonGroup position=\"center\">\r\n                            {!data?.isSigned && <PrimaryButton label=\"Confirm\" onClick={onSubmit} loading={isSubmitLoading} />}\r\n                            <PrimaryButton label=\"Download\" className=\"mx-2\" icon=\"pi pi-download\" loading={loading} onClick={handleDownloadPdf} />\r\n                            <PrimaryButton label=\"Print\" className=\"bg-yellow-300\" onClick={handlePrint} icon=\"pi pi-print\" />\r\n                        </CustomButtonGroup>\r\n\r\n                        <div style={{ pointerEvents: data?.isSigned ? 'none' : 'auto' }}>\r\n                            {signatures?.map((item, i) => (\r\n                                <div key={i} className={`signature-box border-round-lg p-2 my-1 ${item?.error ? 'border-1 border-red-200' : ''}`}>\r\n                                    <button className=\"cursor-pointer\" onClick={() => onOpenSignatureModel(i)}>\r\n                                        Sign {i + 1}\r\n                                    </button>\r\n\r\n                                    {item?.url ? (\r\n                                        <img style={{ height: '100px' }} src={getImageURL(item?.url)} alt={`signature-${i + 1}`} />\r\n                                    ) : (\r\n                                        <p className=\"\" style={{ height: '100px' }}>\r\n                                            Your Signature Here...\r\n                                            <img className=\"border-round-lg\" style={{ maxHeight: '80px' }} src={dummy} alt={`signature-${i + 1}`} />\r\n                                        </p>\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </CustomColLayout>\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomDialog\r\n                title={`Signature ${openSignatureModal ? openSignatureModal : ''}`}\r\n                visible={openSignatureModal}\r\n                onCancel={onCloseSignatureModel}\r\n                width=\"80vh\"\r\n                onClear={handleClearSign}\r\n                onSave={handleSave}\r\n            >\r\n                <div className=\"border-round-sm border-1 surface-border \">\r\n                    <SignaturePad canvasProps={{ className: 'sigPad' }} ref={signRef} />\r\n                </div>\r\n                <CustomCheckbox label=\"Copy To All\" value={copyToAll} onChange={(e) => setCopyToAll(e.value)} />\r\n            </CustomDialog>\r\n        </>\r\n    );\r\n}\r\n"],"names":["base64ToFile","base64","mime","fileName","blob","base64ToBlob","byteCharacters","atob","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","Blob","type","blobToFile","File","lastModified","Date","now","SubscriptionPlanAgreement","history","useHistory","templateRef","useRef","signRef","dispatch","useDispatch","subscriptionPlanId","useParams","loading","setLoading","useState","copyToAll","setCopyToAll","openSignatureModal","setOpenSignatureModal","signatures","setSignatures","data","setData","replaceWithImage","template","placeholder","occurrence","replace","RegExp","concat","useEffect","getSubscriptionAgreementDetails","e","_objectSpread","htmlContent","_signatures","regex","matchAll","map","url","error","getPlaceholderUrls","onCloseSignatureModel","forEach","item","document","getElementById","src","getImageURL","handlePrint","useReactToPrint","content","current","documentTitle","onAfterPrint","console","log","isSubmitLoading","setSubmitLoading","_jsxs","_Fragment","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomColLayout","size","className","ref","id","dangerouslySetInnerHTML","__html","cssContent","CustomButtonGroup","position","isSigned","PrimaryButton","label","onClick","onSubmit","isValid","signSubscriptionAgreement","push","icon","async","subscription","member","company","elementToPrint","options","filename","firstName","lastName","companyName","moment","format","jsPDF","unit","orientation","html2canvas","scale","wrapper","createElement","appendChild","cloneNode","body","Promise","resolve","domToPdf","removeChild","style","pointerEvents","onOpenSignatureModel","height","alt","maxHeight","dummy","CustomDialog","visible","onCancel","width","onClear","handleClearSign","clear","onSave","handleSave","isEmpty","file","dataURL","getTrimmedCanvas","toDataURL","split","mimeType","SignaturePad","canvasProps","CustomCheckbox","value","onChange"],"sourceRoot":""}