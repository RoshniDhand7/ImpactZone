{"version":3,"file":"static/js/845.a1c543d5.chunk.js","mappings":"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","sources":["shared/Layout/FormPage.jsx","views/Settings/Inventory/Categories/CategoriesForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addCategory, editCategory, getCategory } from '../../../../redux/actions/InventorySettings/categoriesAction';\r\nimport { yesNoOptions } from '../../../../utils/dropdownConstants';\r\n\r\nconst CategoriesForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const { categoryDropdown } = useSelector((state) => state.category);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getCategory(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        displayInPos: data.displayInPos.toString(),\r\n                        posButtonLabel: data.posButtonLabel,\r\n                        availableCategory: data.availableCategory,\r\n                        description: data.description,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        displayInPos: 'false',\r\n        posButtonLabel: '',\r\n        availableCategory: '',\r\n        description: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editCategory(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addCategory(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <FormPage backText=\"Categories\">\r\n            <CustomCard col=\"12\" title=\"Add Categories\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"displayInPos\" label=\"Display In POS\" options={yesNoOptions} data={data} onChange={handleChange} />\r\n                    <CustomInput label=\"POS Button Label\" name=\"posButtonLabel\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"availableCategory\" options={categoryDropdown} data={data} onChange={handleChange} />\r\n                    <CustomTextArea name=\"description\" maxLength=\"266\" data={data} onChange={handleChange} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Catalog Items\">\r\n                <CustomGridLayout></CustomGridLayout>\r\n            </CustomCard>\r\n\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default CategoriesForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","CategoriesForm","id","useParams","dispatch","useDispatch","categoryDropdown","useSelector","state","category","loading","setLoading","useState","useEffect","getCategory","data","setData","name","displayInPos","toString","posButtonLabel","availableCategory","description","isActive","handleChange","value","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","label","options","yesNoOptions","CustomTextArea","maxLength","CustomInputSwitch","CustomButtonGroup","PrimaryButton","handleSave","showFormErrors","editCategory","addCategory","LightButton"],"sourceRoot":""}