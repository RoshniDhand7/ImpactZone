{"version":3,"file":"static/js/661.84e93660.chunk.js","mappings":"qLAIe,SAASA,EAAQC,GAAkC,IAAjC,SAAEC,EAAQ,SAAEC,EAAQ,OAAEC,GAAQH,EAC3D,MAAMI,GAAUC,EAAAA,EAAAA,MAEVC,EAASA,KACPH,EACAC,EAAQG,QAAQJ,GAEhBC,EAAQI,QACZ,EAEJ,OACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAgB,CAAAT,SAAA,CACZC,GACGO,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0BV,SAAA,EACrCW,EAAAA,EAAAA,KAAA,KAAGD,UAAU,2CAA2CE,QAASP,KACjEG,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gDAAgDE,QAASP,EAAOL,SAAA,CAAC,WACnEC,QAGjB,MACJU,EAAAA,EAAAA,KAAAE,EAAAA,SAAA,CAAAb,SAAGA,MAGf,C,yKCfe,SAASc,EAAcf,GAAe,IAAd,QAAEI,GAASJ,EAC9C,MAAMgB,GAAWC,EAAAA,EAAAA,OACX,GAAEC,IAAOC,EAAAA,EAAAA,MACRC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAC7BC,eAAgB,GAChBC,WAAY,MAEhBC,EAAAA,EAAAA,YAAU,KACFP,GACAF,GACIU,EAAAA,EAAAA,IAAcR,GAAKE,IACfC,EAAQ,CACJE,eAAgBH,EAAKG,eACrBC,WAAYJ,EAAKI,YACnB,IAGd,GACD,CAACN,EAAIF,IAER,MAAMW,EAAeC,IAAsB,IAArB,KAAEC,EAAI,MAAEC,GAAOF,EACjC,MAAMG,GAAaC,EAAAA,EAAAA,GAAeH,EAAMC,EAAOV,GAC/CC,GAASY,IAAI,IAAWA,EAAM,CAACJ,GAAOC,EAAOC,gBAAc,GAExDG,EAASC,IAAcb,EAAAA,EAAAA,WAAS,GAWvC,OACIV,EAAAA,EAAAA,KAAA,OAAAX,UACIQ,EAAAA,EAAAA,MAACV,EAAAA,EAAQ,CAACG,SAAS,eAAcD,SAAA,EAC7BW,EAAAA,EAAAA,KAACwB,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,SAAQrC,UAC/BQ,EAAAA,EAAAA,MAAC8B,EAAAA,EAAgB,CAAAtC,SAAA,EACbW,EAAAA,EAAAA,KAAC4B,EAAAA,GAAc,CAACX,KAAK,iBAAiBY,QAASC,EAAAA,GAAuBtB,KAAMA,EAAMuB,SAAUhB,EAAciB,UAAQ,KAClHhC,EAAAA,EAAAA,KAACiC,EAAAA,GAAW,CAAChB,KAAK,aAAaT,KAAMA,EAAMuB,SAAUhB,EAAciB,UAAQ,UAGnFnC,EAAAA,EAAAA,MAACqC,EAAAA,GAAiB,CAAA7C,SAAA,EACdW,EAAAA,EAAAA,KAACmC,EAAAA,GAAa,CAACC,MAAM,OAAOd,QAASA,EAASvB,UAAU,OAAOE,QAnB5DoC,MACXC,EAAAA,EAAAA,IAAe9B,EAAMC,IAEjBL,EADAE,GACSiC,EAAAA,EAAAA,IAAejC,EAAIE,EAAMe,EAAY/B,IAErCgD,EAAAA,EAAAA,IAAchC,EAAMe,EAAY/B,GAEjD,KAaYQ,EAAAA,EAAAA,KAACyC,EAAAA,GAAW,CAACL,MAAM,SAASnC,QAASA,IAAMT,EAAQG,QAAQ,+BAK/E,C","sources":["shared/Layout/FormPage.jsx","views/Settings/Business/ReasonCode/ReasonCodeForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { CustomDropDown, CustomInput } from '../../../../shared/Input/AllInputs';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { reasonCodeTypeOptions } from '../../../../utils/dropdownConstants';\r\nimport { addReasonCode, editReasonCode, getReasonCode } from '../../../../redux/actions/BusinessSettings/reasonActions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\n\r\nexport default function ReasonCodeForm({ history }) {\r\n    const dispatch = useDispatch();\r\n    const { id } = useParams();\r\n    const [data, setData] = useState({\r\n        reasonCodeType: '',\r\n        reasonCode: '',\r\n    });\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getReasonCode(id, (data) => {\r\n                    setData({\r\n                        reasonCodeType: data.reasonCodeType,\r\n                        reasonCode: data.reasonCode,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editReasonCode(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addReasonCode(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <FormPage backText=\"Reason Codes\">\r\n                <CustomCard col=\"12\" title=\"Active\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"reasonCodeType\" options={reasonCodeTypeOptions} data={data} onChange={handleChange} required />\r\n                        <CustomInput name=\"reasonCode\" data={data} onChange={handleChange} required />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" loading={loading} className=\"mx-2\" onClick={handleSave} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.replace('/settings/business')} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </div>\r\n    );\r\n}\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","ReasonCodeForm","dispatch","useDispatch","id","useParams","data","setData","useState","reasonCodeType","reasonCode","useEffect","getReasonCode","handleChange","_ref2","name","value","formErrors","formValidation","prev","loading","setLoading","CustomCard","col","title","CustomGridLayout","CustomDropDown","options","reasonCodeTypeOptions","onChange","required","CustomInput","CustomButtonGroup","PrimaryButton","label","handleSave","showFormErrors","editReasonCode","addReasonCode","LightButton"],"sourceRoot":""}