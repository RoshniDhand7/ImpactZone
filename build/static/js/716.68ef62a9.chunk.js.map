{"version":3,"file":"static/js/716.68ef62a9.chunk.js","mappings":"oRAaA,MAmEA,EAnEwBA,KACpB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,OACV,GAAEC,IAAOC,EAAAA,EAAAA,MACRC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAC7BC,KAAM,GACNC,gBAAgB,EAChBC,eAAe,EACfC,mBAAmB,EACnBC,eAAgB,GAChBC,UAAU,KAGdC,EAAAA,EAAAA,YAAU,KACFX,GACAJ,GACIgB,EAAAA,EAAAA,IAAcZ,GAAKE,IACfC,EAAQ,CACJE,KAAMH,EAAKG,KACXC,eAAgBJ,EAAKI,eACrBC,cAAeL,EAAKK,cACpBC,kBAAmBN,EAAKM,kBACxBC,eAAgBP,EAAKO,eACrBC,SAAUR,EAAKQ,UACjB,IAGd,GACD,CAACV,EAAIJ,IACR,MAAOiB,EAASC,IAAcV,EAAAA,EAAAA,WAAS,GACjCW,EAAeC,IAAsB,IAArB,KAAEX,EAAI,MAAEY,GAAOD,EACjC,MAAME,GAAaC,EAAAA,EAAAA,GAAed,EAAMY,EAAOf,GAC/CC,GAASiB,IAAI,IAAWA,EAAM,CAACf,GAAOY,EAAOC,gBAAc,EAY/D,OACIG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,SAAS,cAAaH,SAAA,EAC5BF,EAAAA,EAAAA,KAACM,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,UAASN,UAChCC,EAAAA,EAAAA,MAACM,EAAAA,EAAgB,CAAAP,SAAA,EACbF,EAAAA,EAAAA,KAACU,EAAAA,GAAW,CAAC7B,KAAMA,EAAMG,KAAK,OAAO2B,SAAUjB,EAAca,IAAK,KAClEP,EAAAA,EAAAA,KAACY,EAAAA,GAAc,CAAC5B,KAAK,iBAAiB6B,QAASC,EAAAA,GAAcH,SAAUjB,EAAcb,KAAMA,KAC3FmB,EAAAA,EAAAA,KAACY,EAAAA,GAAc,CAAC5B,KAAK,gBAAgB6B,QAASC,EAAAA,GAAcH,SAAUjB,EAAcb,KAAMA,KAC1FmB,EAAAA,EAAAA,KAACY,EAAAA,GAAc,CAAC5B,KAAK,oBAAoB6B,QAASC,EAAAA,GAAcH,SAAUjB,EAAcb,KAAMA,KAC9FmB,EAAAA,EAAAA,KAACU,EAAAA,GAAW,CAAC7B,KAAMA,EAAMG,KAAK,iBAAiB2B,SAAUjB,EAAca,IAAK,KAC5EP,EAAAA,EAAAA,KAACe,EAAAA,GAAiB,CAAC/B,KAAK,WAAWH,KAAMA,EAAM8B,SAAUjB,UAIjES,EAAAA,EAAAA,MAACa,EAAAA,GAAiB,CAAAd,SAAA,EACdF,EAAAA,EAAAA,KAACiB,EAAAA,GAAa,CAACC,MAAM,OAAOC,UAAU,OAAO3B,QAASA,EAAS4B,QAzB5DC,MACXC,EAAAA,EAAAA,IAAezC,EAAMC,IAEjBP,EADAI,GACS4C,EAAAA,EAAAA,IAAe5C,EAAIE,EAAMY,EAAYhB,IAErC+C,EAAAA,EAAAA,IAAc3C,EAAMY,EAAYhB,GAEjD,KAmBYuB,EAAAA,EAAAA,KAACyB,EAAAA,GAAW,CAACP,MAAM,SAASE,QAASA,IAAM3C,EAAQiD,kBAG5D,C","sources":["views/Settings/Employees/Departments/DepartmentsForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { yesNoOptions } from '../../../../utils/dropdownConstants';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport { addDepartment, editDepartment, getDepartment } from '../../../../redux/actions/EmployeeSettings/departmentsAction';\r\n\r\nconst DepartmentsForm = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        showInCalender: false,\r\n        visibleOnline: false,\r\n        salesPersonOnline: false,\r\n        departmentCode: '',\r\n        isActive: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getDepartment(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        showInCalender: data.showInCalender,\r\n                        visibleOnline: data.visibleOnline,\r\n                        salesPersonOnline: data.salesPersonOnline,\r\n                        departmentCode: data.departmentCode,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [loading, setLoading] = useState(false);\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editDepartment(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addDepartment(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Departments\">\r\n                <CustomCard col=\"12\" title=\"General\">\r\n                    <CustomGridLayout>\r\n                        <CustomInput data={data} name=\"name\" onChange={handleChange} col={3} />\r\n                        <CustomDropDown name=\"showInCalender\" options={yesNoOptions} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"visibleOnline\" options={yesNoOptions} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"salesPersonOnline\" options={yesNoOptions} onChange={handleChange} data={data} />\r\n                        <CustomInput data={data} name=\"departmentCode\" onChange={handleChange} col={3} />\r\n                        <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" loading={loading} onClick={handleSave} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DepartmentsForm;\r\n"],"names":["DepartmentsForm","dispatch","useDispatch","history","useHistory","id","useParams","data","setData","useState","name","showInCalender","visibleOnline","salesPersonOnline","departmentCode","isActive","useEffect","getDepartment","loading","setLoading","handleChange","_ref","value","formErrors","formValidation","prev","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","CustomDropDown","options","yesNoOptions","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editDepartment","addDepartment","LightButton","goBack"],"sourceRoot":""}