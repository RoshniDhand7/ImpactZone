{"version":3,"file":"static/js/895.38f78ecb.chunk.js","mappings":"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","sources":["views/Settings/ScheduleSetup/EventClasses/EventClassesForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    CustomCalenderInput,\r\n    CustomCheckbox,\r\n    CustomDropDown,\r\n    CustomInputNumber,\r\n    CustomInputSwitch,\r\n    CustomMultiselect,\r\n} from '../../../../shared/Input/AllInputs';\r\nimport { WeekDaysOption, classMeet } from '../../../../utils/dropdownConstants';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { getEvents, getServicesEvents } from '../../../../redux/actions/ScheduleSettings/eventsActions';\r\nimport { convertToDateTime, showArrayFormErrors, showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { getEmployeePay, getEmployees } from '../../../../redux/actions/EmployeeSettings/employeesAction';\r\nimport { addClasses, editClasses, getEventClass } from '../../../../redux/actions/ScheduleSettings/eventClassesAction';\r\nimport { types } from '../../../../redux/types/types';\r\nimport { getLocations } from '../../../../redux/actions/Settings/ScheduleSetup/locationsActions';\r\n\r\nconst EventClassesForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { id } = useParams();\r\n    const { allEmployees, employeePayType } = useSelector((state) => state.employees);\r\n\r\n    const [data, setData] = useState({\r\n        event: '',\r\n        classMeet: '',\r\n        classLocation: '',\r\n        startDate: '',\r\n        endDate: '',\r\n        schedule: [\r\n            {\r\n                days: [],\r\n                startTime: '',\r\n            },\r\n        ],\r\n        instructor: [\r\n            {\r\n                assistant: null,\r\n                assistantPay: '',\r\n            },\r\n        ],\r\n        staff: null,\r\n        payType: '',\r\n        totalCapacity: null,\r\n        waitlistPeople: null,\r\n        clientSignupClass: false,\r\n        onlineCapacity: null,\r\n        clientPaylater: false,\r\n        clientClassFree: false,\r\n        isActive: true,\r\n    });\r\n    useEffect(() => {\r\n        dispatch(getLocations());\r\n        dispatch(getEvents());\r\n        dispatch(getEmployees());\r\n    }, [dispatch]);\r\n    const { locationDropdown } = useSelector((state) => state.settings.schedule);\r\n    const { allEventClassesDropDown } = useSelector((state) => state.event);\r\n\r\n    let { allEventClasses } = useSelector((state) => state.event);\r\n    allEventClasses = allEventClasses?.find((item) => item._id === data?.event);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (data?.event) {\r\n            setData((prev) => ({ ...prev, totalCapacity: allEventClasses?.defaultMaxAttendes, waitlistPeople: allEventClasses?.maximumWaitlist }));\r\n        }\r\n    }, [data?.event, allEventClasses]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getEventClass(id, (data) => {\r\n                    if (data?.staff) {\r\n                        dispatch(getEmployeePay(data?.staff));\r\n                    }\r\n                    setData({\r\n                        event: data.event,\r\n                        classMeet: data.classMeet,\r\n                        classLocation: data.classLocation,\r\n                        startDate: new Date(data.startDate),\r\n                        endDate: new Date(data.endDate),\r\n                        schedule: data.schedule?.map((item) => ({ ...item, startTime: convertToDateTime(item.startTime) })),\r\n                        instructor: data.instructor,\r\n                        staff: data.staff ? data?.staff : null,\r\n                        payType: data.pay,\r\n                        totalCapacity: data.totalCapacity ? data.totalCapacity : allEventClasses?.defaultMaxAttendes,\r\n                        waitlistPeople: data.waitlistPeople ? data.waitlistPeople : allEventClasses?.maximumWaitlist,\r\n                        clientSignupClass: data.clientSignupClass,\r\n                        onlineCapacity: data.onlineCapacity,\r\n                        clientPaylater: data.clientPaylater,\r\n                        clientClassFree: data.clientClassFree,\r\n                        isActive: data.isActive,\r\n                    });\r\n                    if (data.instructor && data.instructor.length > 0) {\r\n                        for (const instructorItem of data.instructor) {\r\n                            fetchAssistantPayOptions(instructorItem.assistant);\r\n                        }\r\n                    }\r\n                }),\r\n            );\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [id, dispatch, allEmployees, allEventClasses]);\r\n\r\n    const fetchAssistantPayOptions = async (assistantId) => {\r\n        const employeeWithLevel = allEmployees.find((employee) => employee._id === assistantId);\r\n        if (employeeWithLevel) {\r\n            const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n            const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n            const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n\r\n            setData((prev) => ({\r\n                ...prev,\r\n                instructor: prev.instructor.map((inst) =>\r\n                    inst.assistant === assistantId\r\n                        ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : inst.assistantPay }\r\n                        : inst,\r\n                ),\r\n            }));\r\n        }\r\n    };\r\n\r\n    const loading = useSelector((state) => state?.loader?.isLoading);\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data?.event) {\r\n            dispatch(getServicesEvents(data?.event));\r\n            setData((prev) => ({\r\n                ...prev,\r\n                staff: null,\r\n                payType: '',\r\n                instructor: [\r\n                    {\r\n                        assistant: null,\r\n                        assistantPay: '',\r\n                    },\r\n                ],\r\n            }));\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [data?.event]);\r\n\r\n    const handleAddSchedule = () => {\r\n        const newSchedule = {\r\n            days: [],\r\n            startTime: '',\r\n            timeFormat: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            schedule: [...prevData.schedule, newSchedule],\r\n        }));\r\n    };\r\n    const handleAddAssistant = () => {\r\n        const newAssistant = {\r\n            assistant: '',\r\n            assistantPay: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            instructor: [...prevData.instructor, newAssistant],\r\n        }));\r\n    };\r\n    const { allServicesEvents } = useSelector((state) => state.event);\r\n\r\n    const eventLevels = allServicesEvents && allServicesEvents?.EventService?.map((item) => item.eventLevel?._id);\r\n\r\n    const employeesWithLevel = allEmployees\r\n        .filter((employee) => {\r\n            return employee.employeeClassData.some((classData) => eventLevels?.includes(classData.isClassLevel));\r\n        })\r\n        .map((employee) => ({\r\n            name: employee.firstName,\r\n            value: employee._id,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        if (data?.staff) {\r\n            dispatch(getEmployeePay(data?.staff));\r\n        }\r\n        return () => {\r\n            dispatch({\r\n                type: types.CHANGE_EMPLOYEES_PAY_TYPE,\r\n                payload: [],\r\n            });\r\n        };\r\n    }, [data?.staff, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (employeePayType) {\r\n            let defaultPay = employeePayType?.employeeClassData?.find((item) => item.isDefaultPay);\r\n            setData((prev) => ({ ...prev, payType: defaultPay ? defaultPay.payType : null }));\r\n        }\r\n    }, [employeePayType, allEmployees]);\r\n\r\n    const handleChangeDynamicField = async ({ name, value, customIndex, fieldName }) => {\r\n        const _newData = { ...data };\r\n        let obj = _newData[fieldName][customIndex];\r\n        obj[name] = value;\r\n\r\n        if (name === 'assistant') {\r\n            _newData[fieldName][customIndex] = obj;\r\n            setData(() => ({\r\n                ..._newData,\r\n            }));\r\n            await dispatch(getEmployeePay(value));\r\n        }\r\n\r\n        const formErrors = formValidation(name, value, obj);\r\n        obj.formErrors = formErrors;\r\n        _newData[fieldName][customIndex] = obj;\r\n        setData(() => ({\r\n            ..._newData,\r\n        }));\r\n\r\n        if (name === 'assistant') {\r\n            const selectedAssistant = value;\r\n            const employeeWithLevel = allEmployees.find((employee) => employee._id === selectedAssistant);\r\n\r\n            if (employeeWithLevel) {\r\n                const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n                const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n                const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n                setData((prev) => ({\r\n                    ...prev,\r\n                    instructor: prev.instructor.map((inst, idx) =>\r\n                        idx === customIndex\r\n                            ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : null }\r\n                            : inst,\r\n                    ),\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    // const handleChangeDynamicField = ({ name, value, customIndex, fieldName }) => {\r\n    //     const _newData = { ...data };\r\n    //     let obj = _newData[fieldName][customIndex];\r\n    //     obj[name] = value;\r\n    //     if (name === 'assistant') {\r\n    //         _newData[fieldName][customIndex] = obj;\r\n    //         setData(() => ({\r\n    //             ..._newData,\r\n    //         }));\r\n    //         dispatch(getEmployeePay(value));\r\n    //     }\r\n    //     const formErrors = formValidation(name, value, obj);\r\n    //     obj.formErrors = formErrors;\r\n    //     _newData[fieldName][customIndex] = obj;\r\n    //     setData(() => ({\r\n    //         ..._newData,\r\n    //     }));\r\n    // };\r\n\r\n    // const getAvailableOptions = (index) => {\r\n    //     const selectedDays = data.schedule?.flatMap((item, idx) => (idx !== index ? item.days : []));\r\n    //     return WeekDaysOption.filter((day) => !selectedDays.includes(day.value));\r\n    // };\r\n\r\n    const getPayOptions = () => {\r\n        let payType = employeePayType?.employeeClassData?.map((item) => ({ name: item.label, value: item.payType }));\r\n        const uniqueOptionsSet = new Set(payType?.map((option) => JSON.stringify(option)));\r\n        const uniqueOptions = Array.from(uniqueOptionsSet)?.map((optionString) => JSON.parse(optionString));\r\n        return uniqueOptions;\r\n    };\r\n    const getAssistantOptions = (index) => {\r\n        const existingAssistants = data.instructor.filter((_, idx) => idx !== index)?.flatMap((item) => item.assistant);\r\n        const optionsToExclude = [data.staff, ...existingAssistants];\r\n        return employeesWithLevel.filter((level) => !optionsToExclude.includes(level.value));\r\n    };\r\n\r\n    const handleRemove = (indexToRemove, fieldName) => {\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            [fieldName]: prevData[fieldName].filter((_, index) => index !== indexToRemove),\r\n        }));\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            let validatedSchedule = showArrayFormErrors(data.schedule);\r\n            if (!validatedSchedule.isValid) {\r\n                setData((prev) => ({ ...prev, schedule: validatedSchedule.data }));\r\n            }\r\n            if (validatedSchedule.isValid) {\r\n                if (id) {\r\n                    dispatch(editClasses(id, data, history));\r\n                } else {\r\n                    dispatch(addClasses(data, history));\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Classes\">\r\n                <CustomGridLayout>\r\n                    <CustomDropDown name=\"event\" label=\"Class Name\" options={allEventClassesDropDown} onChange={handleChange} data={data} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} extraClassName=\"text-right\" />\r\n                </CustomGridLayout>\r\n                <CustomCard title=\"When and Where\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"classMeet\" label=\"How often does class meet?\" options={classMeet} onChange={handleChange} data={data} col=\"6\" />\r\n                        <CustomDropDown name=\"classLocation\" options={locationDropdown} onChange={handleChange} data={data} col=\"6\" />\r\n                        <CustomCalenderInput name=\"startDate\" onChange={handleChange} data={data} />\r\n                        <CustomCalenderInput name=\"endDate\" onChange={handleChange} data={data} disabled={!data?.startDate} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add New Schedule\" className=\"mx-2 \" onClick={handleAddSchedule} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.schedule?.map((scheduleItem, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                {/* <CustomInputTime\r\n                                    name=\"startTime\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    customIndex={index}\r\n                                /> */}\r\n                                <CustomCalenderInput\r\n                                    name=\"startTime\"\r\n                                    customIndex={index}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    timeOnly\r\n                                    placeholder=\"Select Time\"\r\n                                    hourFormat=\"12\"\r\n                                />\r\n                                <CustomMultiselect\r\n                                    name=\"days\"\r\n                                    customIndex={index}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    options={WeekDaysOption}\r\n                                    fieldName=\"schedule\"\r\n                                    col={4}\r\n                                />\r\n                                {index > 0 && <i className=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'schedule')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Instructor\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"staff\" options={employeesWithLevel} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"payType\" options={getPayOptions()} onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add Assistant\" className=\"mx-2\" onClick={handleAddAssistant} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.instructor?.map((inst, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                <CustomDropDown\r\n                                    name=\"assistant\"\r\n                                    customIndex={index}\r\n                                    options={getAssistantOptions(index)}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                <CustomDropDown\r\n                                    name=\"assistantPay\"\r\n                                    customIndex={index}\r\n                                    options={inst.assistantPayOptions}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                {index > 0 && <i className=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'instructor')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Participants\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomInputNumber name=\"totalCapacity\" onChange={handleChange} data={data} />\r\n                        <CustomInputNumber name=\"waitlistPeople\" label=\"How many people can waitlist\" onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Online Scheduling\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox\r\n                            name=\"clientSignupClass\"\r\n                            label=\"Allow clients to sign up for this class online\"\r\n                            onChange={handleChange}\r\n                            data={data}\r\n                            col=\"12\"\r\n                        />\r\n                        <CustomInputNumber name=\"onlineCapacity\" label=\"Online Capacity\" onChange={handleChange} data={data} col=\"6\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Pricing\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox name=\"clientPaylater\" label=\"Allow clients to sign up now and pay later\" onChange={handleChange} data={data} col=\"12\" />\r\n                        <CustomCheckbox name=\"clientClassFree\" label=\"Clients can attend this class for free\" onChange={handleChange} data={data} col=\"12\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EventClassesForm;\r\n"],"names":["EventClassesForm","_allEventClasses","_allServicesEvents$Ev","_data$schedule2","_data$instructor","dispatch","useDispatch","id","useParams","allEmployees","employeePayType","useSelector","state","employees","data","setData","useState","event","classMeet","classLocation","startDate","endDate","schedule","days","startTime","instructor","assistant","assistantPay","staff","payType","totalCapacity","waitlistPeople","clientSignupClass","onlineCapacity","clientPaylater","clientClassFree","isActive","useEffect","getLocations","getEvents","getEmployees","locationDropdown","settings","allEventClassesDropDown","allEventClasses","find","item","_id","history","useHistory","prev","_allEventClasses2","_allEventClasses3","defaultMaxAttendes","maximumWaitlist","getEventClass","_data$schedule","_allEventClasses4","_allEventClasses5","getEmployeePay","Date","map","convertToDateTime","pay","length","instructorItem","fetchAssistantPayOptions","async","employeeWithLevel","employee","assistantId","_employeeWithLevel$em","uniquePayTypeOptions","employeeClassData","name","label","value","filter","option","index","self","findIndex","t","defaultPay","isDefaultPay","inst","assistantPayOptions","loading","_state$loader","loader","isLoading","handleChange","_ref","formErrors","formValidation","getServicesEvents","allServicesEvents","eventLevels","EventService","_item$eventLevel","eventLevel","employeesWithLevel","some","classData","includes","isClassLevel","firstName","type","types","CHANGE_EMPLOYEES_PAY_TYPE","payload","_employeePayType$empl","handleChangeDynamicField","customIndex","fieldName","_ref2","_newData","obj","selectedAssistant","_employeeWithLevel$em2","idx","getAssistantOptions","_data$instructor$filt","existingAssistants","_","flatMap","optionsToExclude","level","handleRemove","indexToRemove","prevData","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomGridLayout","CustomDropDown","options","onChange","CustomInputSwitch","extraClassName","CustomCard","title","col","CustomCalenderInput","disabled","extraClass","PrimaryButton","className","onClick","handleAddSchedule","newSchedule","timeFormat","scheduleItem","timeOnly","placeholder","hourFormat","CustomMultiselect","WeekDaysOption","getPayOptions","_employeePayType$empl2","_Array$from","uniqueOptionsSet","Set","JSON","stringify","Array","from","optionString","parse","handleAddAssistant","newAssistant","CustomInputNumber","CustomCheckbox","CustomButtonGroup","handleSave","showFormErrors","validatedSchedule","showArrayFormErrors","isValid","editClasses","addClasses","LightButton","goBack"],"sourceRoot":""}