{"version":3,"file":"static/js/895.18d93222.chunk.js","mappings":"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","sources":["views/Settings/ScheduleSetup/EventClasses/EventClassesForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { CustomCalenderInput, CustomCheckbox, CustomDropDown, CustomInputNumber, CustomMultiselect } from '../../../../shared/Input/AllInputs';\r\nimport { WeekDaysOption, classMeet } from '../../../../utils/dropdownConstants';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { getLocations } from '../../../../redux/actions/ScheduleSettings/locationsActions';\r\nimport { getEvents, getServicesEvents } from '../../../../redux/actions/ScheduleSettings/eventsActions';\r\nimport { convertToDateTime, showArrayFormErrors, showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { getEmployeePay, getEmployees } from '../../../../redux/actions/EmployeeSettings/employeesAction';\r\nimport { addClasses, editClasses, getEventClass } from '../../../../redux/actions/ScheduleSettings/eventClassesAction';\r\nimport { types } from '../../../../redux/types/types';\r\n\r\nconst EventClassesForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { id } = useParams();\r\n    const { allEmployees, employeePayType } = useSelector((state) => state.employees);\r\n\r\n    const [data, setData] = useState({\r\n        event: '',\r\n        classMeet: '',\r\n        classLocation: '',\r\n        startDate: '',\r\n        endDate: '',\r\n        schedule: [\r\n            {\r\n                days: [],\r\n                startTime: '',\r\n            },\r\n        ],\r\n        instructor: [\r\n            {\r\n                assistant: null,\r\n                assistantPay: '',\r\n            },\r\n        ],\r\n        staff: '',\r\n        payType: '',\r\n        totalCapacity: null,\r\n        waitlistPeople: null,\r\n        clientSignupClass: false,\r\n        onlineCapacity: null,\r\n        clientPaylater: false,\r\n        clientClassFree: false,\r\n    });\r\n    useEffect(() => {\r\n        dispatch(getLocations());\r\n        dispatch(getEvents());\r\n        dispatch(getEmployees());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getEventClass(id, (data) => {\r\n                    dispatch(getEmployeePay(data?.staff));\r\n                    setData({\r\n                        event: data.event,\r\n                        classMeet: data.classMeet,\r\n                        classLocation: data.classLocation,\r\n                        startDate: new Date(data.startDate),\r\n                        endDate: new Date(data.endDate),\r\n                        schedule: data.schedule?.map((item) => ({ ...item, startTime: convertToDateTime(item.startTime) })),\r\n                        instructor: data.instructor,\r\n                        staff: data.staff,\r\n                        payType: data.pay,\r\n                        totalCapacity: data.totalCapacity,\r\n                        waitlistPeople: data.waitlistPeople,\r\n                        clientSignupClass: data.clientSignupClass,\r\n                        onlineCapacity: data.onlineCapacity,\r\n                        clientPaylater: data.clientPaylater,\r\n                        clientClassFree: data.clientClassFree,\r\n                    });\r\n                    if (data.instructor && data.instructor.length > 0) {\r\n                        for (const instructorItem of data.instructor) {\r\n                            fetchAssistantPayOptions(instructorItem.assistant);\r\n                        }\r\n                    }\r\n                }),\r\n            );\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [id, dispatch, allEmployees]);\r\n\r\n    const fetchAssistantPayOptions = async (assistantId) => {\r\n        const employeeWithLevel = allEmployees.find((employee) => employee._id === assistantId);\r\n        if (employeeWithLevel) {\r\n            const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n            const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n            const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n\r\n            setData((prev) => ({\r\n                ...prev,\r\n                instructor: prev.instructor.map((inst) =>\r\n                    inst.assistant === assistantId\r\n                        ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : inst.assistantPay }\r\n                        : inst,\r\n                ),\r\n            }));\r\n        }\r\n    };\r\n\r\n    const { locationDropdown } = useSelector((state) => state.locations);\r\n    const { allEventClassesDropDown } = useSelector((state) => state.event);\r\n    const history = useHistory();\r\n    const loading = useSelector((state) => state?.loader?.isLoading);\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data?.event) {\r\n            dispatch(getServicesEvents(data?.event));\r\n            setData((prev) => ({\r\n                ...prev,\r\n                staff: '',\r\n                payType: '',\r\n                instructor: [\r\n                    {\r\n                        assistant: null,\r\n                        assistantPay: '',\r\n                    },\r\n                ],\r\n            }));\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [data?.event]);\r\n\r\n    const handleAddSchedule = () => {\r\n        const newSchedule = {\r\n            days: [],\r\n            startTime: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            schedule: [...prevData.schedule, newSchedule],\r\n        }));\r\n    };\r\n    const handleAddAssistant = () => {\r\n        const newAssistant = {\r\n            assistant: '',\r\n            assistantPay: '',\r\n        };\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            instructor: [...prevData.instructor, newAssistant],\r\n        }));\r\n    };\r\n    const { allServicesEvents } = useSelector((state) => state.event);\r\n\r\n    const eventLevels = allServicesEvents && allServicesEvents?.EventService?.map((item) => item.eventLevel?._id);\r\n\r\n    const employeesWithLevel = allEmployees\r\n        .filter((employee) => {\r\n            return employee.employeeClassData.some((classData) => eventLevels?.includes(classData.isClassLevel));\r\n        })\r\n        .map((employee) => ({\r\n            name: employee.firstName,\r\n            value: employee._id,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        if (data?.staff) {\r\n            dispatch(getEmployeePay(data?.staff));\r\n        }\r\n        return () => {\r\n            dispatch({\r\n                type: types.CHANGE_EMPLOYEES_PAY_TYPE,\r\n                payload: [],\r\n            });\r\n        };\r\n    }, [data?.staff, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (employeePayType) {\r\n            let defaultPay = employeePayType?.employeeClassData?.find((item) => item.isDefaultPay);\r\n            setData((prev) => ({ ...prev, payType: defaultPay ? defaultPay.payType : null }));\r\n        }\r\n    }, [employeePayType, allEmployees]);\r\n\r\n    const handleChangeDynamicField = async ({ name, value, customIndex, fieldName }) => {\r\n        const _newData = { ...data };\r\n        let obj = _newData[fieldName][customIndex];\r\n        obj[name] = value;\r\n\r\n        if (name === 'assistant') {\r\n            _newData[fieldName][customIndex] = obj;\r\n            setData(() => ({\r\n                ..._newData,\r\n            }));\r\n            await dispatch(getEmployeePay(value));\r\n        }\r\n\r\n        const formErrors = formValidation(name, value, obj);\r\n        obj.formErrors = formErrors;\r\n        _newData[fieldName][customIndex] = obj;\r\n        setData(() => ({\r\n            ..._newData,\r\n        }));\r\n\r\n        if (name === 'assistant') {\r\n            const selectedAssistant = value;\r\n            const employeeWithLevel = allEmployees.find((employee) => employee._id === selectedAssistant);\r\n\r\n            if (employeeWithLevel) {\r\n                const payTypeOptions = employeeWithLevel.employeeClassData.map((item) => ({ name: item.label, value: item.payType }));\r\n                const uniquePayTypeOptions = payTypeOptions.filter((option, index, self) => index === self.findIndex((t) => t.value === option.value));\r\n                const defaultPay = employeeWithLevel?.employeeClassData?.find((item) => item.isDefaultPay);\r\n                setData((prev) => ({\r\n                    ...prev,\r\n                    instructor: prev.instructor.map((inst, idx) =>\r\n                        idx === customIndex\r\n                            ? { ...inst, assistantPayOptions: uniquePayTypeOptions, assistantPay: defaultPay ? defaultPay.payType : null }\r\n                            : inst,\r\n                    ),\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    // const handleChangeDynamicField = ({ name, value, customIndex, fieldName }) => {\r\n    //     const _newData = { ...data };\r\n    //     let obj = _newData[fieldName][customIndex];\r\n    //     obj[name] = value;\r\n    //     if (name === 'assistant') {\r\n    //         _newData[fieldName][customIndex] = obj;\r\n    //         setData(() => ({\r\n    //             ..._newData,\r\n    //         }));\r\n    //         dispatch(getEmployeePay(value));\r\n    //     }\r\n    //     const formErrors = formValidation(name, value, obj);\r\n    //     obj.formErrors = formErrors;\r\n    //     _newData[fieldName][customIndex] = obj;\r\n    //     setData(() => ({\r\n    //         ..._newData,\r\n    //     }));\r\n    // };\r\n\r\n    const getAvailableOptions = (index) => {\r\n        const selectedDays = data.schedule?.flatMap((item, idx) => (idx !== index ? item.days : []));\r\n        return WeekDaysOption.filter((day) => !selectedDays.includes(day.value));\r\n    };\r\n\r\n    const getPayOptions = () => {\r\n        let payType = employeePayType?.employeeClassData?.map((item) => ({ name: item.label, value: item.payType }));\r\n        const uniqueOptionsSet = new Set(payType?.map((option) => JSON.stringify(option)));\r\n        const uniqueOptions = Array.from(uniqueOptionsSet)?.map((optionString) => JSON.parse(optionString));\r\n        return uniqueOptions;\r\n    };\r\n    const getAssistantOptions = (index) => {\r\n        const existingAssistants = data.instructor.filter((_, idx) => idx !== index)?.flatMap((item) => item.assistant);\r\n        const optionsToExclude = [data.staff, ...existingAssistants];\r\n        return employeesWithLevel.filter((level) => !optionsToExclude.includes(level.value));\r\n    };\r\n\r\n    const handleRemove = (indexToRemove, fieldName) => {\r\n        setData((prevData) => ({\r\n            ...prevData,\r\n            [fieldName]: prevData[fieldName].filter((_, index) => index !== indexToRemove),\r\n        }));\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            let validatedSchedule = showArrayFormErrors(data.schedule);\r\n            if (!validatedSchedule.isValid) {\r\n                setData((prev) => ({ ...prev, schedule: validatedSchedule.data }));\r\n            }\r\n            if (validatedSchedule.isValid) {\r\n                if (id) {\r\n                    dispatch(editClasses(id, data, history));\r\n                } else {\r\n                    dispatch(addClasses(data, history));\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Classes\">\r\n                <CustomGridLayout>\r\n                    <CustomDropDown name=\"event\" label=\"Class Name\" options={allEventClassesDropDown} onChange={handleChange} data={data} />\r\n                </CustomGridLayout>\r\n\r\n                <CustomCard title=\"When and Where\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"classMeet\" label=\"How often does class meet?\" options={classMeet} onChange={handleChange} data={data} col=\"6\" />\r\n                        <CustomDropDown name=\"classLocation\" options={locationDropdown} onChange={handleChange} data={data} col=\"6\" />\r\n                        <CustomCalenderInput name=\"startDate\" onChange={handleChange} data={data} />\r\n                        <CustomCalenderInput name=\"endDate\" onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add New Schedule\" className=\"mx-2 \" onClick={handleAddSchedule} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.schedule?.map((scheduleItem, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                <CustomCalenderInput\r\n                                    name=\"startTime\"\r\n                                    customIndex={index}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    timeOnly\r\n                                    placeholder=\"Select Time\"\r\n                                />\r\n                                <CustomMultiselect\r\n                                    name=\"days\"\r\n                                    customIndex={index}\r\n                                    options={getAvailableOptions(index)}\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={scheduleItem}\r\n                                    fieldName=\"schedule\"\r\n                                    col={4}\r\n                                />\r\n                                {index > 0 && <i class=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'schedule')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Instructor\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomDropDown name=\"staff\" options={employeesWithLevel} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"payType\" options={getPayOptions()} onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                    <CustomGridLayout extraClass=\"justify-content-end\">\r\n                        <PrimaryButton label=\"Add Assistant\" className=\"mx-2\" onClick={handleAddAssistant} loading={loading} />\r\n                    </CustomGridLayout>\r\n                    {data?.instructor?.map((inst, index) => (\r\n                        <div key={index}>\r\n                            <CustomGridLayout extraClass=\"align-items-center\">\r\n                                <CustomDropDown\r\n                                    name=\"assistant\"\r\n                                    customIndex={index}\r\n                                    options={getAssistantOptions(index)}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                <CustomDropDown\r\n                                    name=\"assistantPay\"\r\n                                    customIndex={index}\r\n                                    options={inst.assistantPayOptions}\r\n                                    fieldName=\"instructor\"\r\n                                    onChange={handleChangeDynamicField}\r\n                                    data={inst}\r\n                                />\r\n                                {index > 0 && <i className=\"pi pi-minus-circle mt-4\" onClick={() => handleRemove(index, 'instructor')}></i>}\r\n                            </CustomGridLayout>\r\n                        </div>\r\n                    ))}\r\n                </CustomCard>\r\n                <CustomCard title=\"Participants\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomInputNumber name=\"totalCapacity\" onChange={handleChange} data={data} />\r\n                        <CustomInputNumber name=\"waitlistPeople\" label=\"How many people can waitlist\" onChange={handleChange} data={data} />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Online Scheduling\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox\r\n                            name=\"clientSignupClass\"\r\n                            label=\"Allow clients to sign up for this class online\"\r\n                            onChange={handleChange}\r\n                            data={data}\r\n                            col=\"12\"\r\n                        />\r\n                        <CustomInputNumber name=\"onlineCapacity\" label=\"Online Capacity\" onChange={handleChange} data={data} col=\"6\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard title=\"Pricing\" col=\"12\">\r\n                    <CustomGridLayout>\r\n                        <CustomCheckbox name=\"clientPaylater\" label=\"Allow clients to sign up now and pay later\" onChange={handleChange} data={data} col=\"12\" />\r\n                        <CustomCheckbox name=\"clientClassFree\" label=\"Clients can attend this class for free\" onChange={handleChange} data={data} col=\"12\" />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EventClassesForm;\r\n"],"names":["EventClassesForm","_allServicesEvents$Ev","_data$schedule3","_data$instructor","dispatch","useDispatch","id","useParams","allEmployees","employeePayType","useSelector","state","employees","data","setData","useState","event","classMeet","classLocation","startDate","endDate","schedule","days","startTime","instructor","assistant","assistantPay","staff","payType","totalCapacity","waitlistPeople","clientSignupClass","onlineCapacity","clientPaylater","clientClassFree","useEffect","getLocations","getEvents","getEmployees","getEventClass","_data$schedule","getEmployeePay","Date","map","item","convertToDateTime","pay","length","instructorItem","fetchAssistantPayOptions","async","employeeWithLevel","find","employee","_id","assistantId","_employeeWithLevel$em","uniquePayTypeOptions","employeeClassData","name","label","value","filter","option","index","self","findIndex","t","defaultPay","isDefaultPay","prev","inst","assistantPayOptions","locationDropdown","locations","allEventClassesDropDown","history","useHistory","loading","_state$loader","loader","isLoading","handleChange","_ref","formErrors","formValidation","getServicesEvents","allServicesEvents","eventLevels","EventService","_item$eventLevel","eventLevel","employeesWithLevel","some","classData","includes","isClassLevel","firstName","type","types","CHANGE_EMPLOYEES_PAY_TYPE","payload","_employeePayType$empl","handleChangeDynamicField","customIndex","fieldName","_ref2","_newData","obj","selectedAssistant","_employeeWithLevel$em2","idx","getAvailableOptions","_data$schedule2","selectedDays","flatMap","WeekDaysOption","day","getAssistantOptions","_data$instructor$filt","existingAssistants","_","optionsToExclude","level","handleRemove","indexToRemove","prevData","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomGridLayout","CustomDropDown","options","onChange","CustomCard","title","col","CustomCalenderInput","extraClass","PrimaryButton","className","onClick","handleAddSchedule","newSchedule","scheduleItem","timeOnly","placeholder","CustomMultiselect","class","getPayOptions","_employeePayType$empl2","_Array$from","uniqueOptionsSet","Set","JSON","stringify","Array","from","optionString","parse","handleAddAssistant","newAssistant","CustomInputNumber","CustomCheckbox","CustomButtonGroup","handleSave","showFormErrors","validatedSchedule","showArrayFormErrors","isValid","editClasses","addClasses","LightButton","goBack"],"sourceRoot":""}