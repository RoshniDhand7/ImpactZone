{"version":3,"file":"static/js/625.c4ff9b54.chunk.js","mappings":"qLAIe,SAASA,EAAQC,GAAkC,IAAjC,SAAEC,EAAQ,SAAEC,EAAQ,OAAEC,GAAQH,EAC3D,MAAMI,GAAUC,EAAAA,EAAAA,MAEVC,EAASA,KACPH,EACAC,EAAQG,QAAQJ,GAEhBC,EAAQI,QACZ,EAEJ,OACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAgB,CAAAT,SAAA,CACZC,GACGO,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0BV,SAAA,EACrCW,EAAAA,EAAAA,KAAA,KAAGD,UAAU,2CAA2CE,QAASP,KACjEG,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gDAAgDE,QAASP,EAAOL,SAAA,CAAC,WACnEC,QAGjB,MACJU,EAAAA,EAAAA,KAAAE,EAAAA,SAAA,CAAAb,SAAGA,MAGf,C,8JChBA,MAyDA,EAzDgCc,KAC5B,MAAMX,GAAUC,EAAAA,EAAAA,OACV,GAAEW,IAAOC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAEvCC,EAAAA,EAAAA,YAAU,KACFP,GACAE,GACIM,EAAAA,EAAAA,IAAqBR,GAAKS,IAAU,IAADC,EAC/BC,EAAQ,CACJC,KAAMH,EAAKG,KACXC,cAAiC,QAApBH,EAAED,EAAKI,qBAAa,IAAAH,EAAAA,EAAI,GACrCI,SAAUL,EAAKK,UACjB,IAGd,GACD,CAACd,EAAIE,IACR,MAAOO,EAAME,IAAWL,EAAAA,EAAAA,UAAS,CAC7BM,KAAM,GACNC,cAAe,GACfC,UAAU,IAERC,EAAe/B,IAAsB,IAArB,KAAE4B,EAAI,MAAEI,GAAOhC,EACjC,MAAMiC,GAAaC,EAAAA,EAAAA,GAAeN,EAAMI,EAAOP,GAC/CE,GAASQ,IAAI,IAAWA,EAAM,CAACP,GAAOI,EAAOC,gBAAc,EAY/D,OACIrB,EAAAA,EAAAA,KAAAE,EAAAA,SAAA,CAAAb,UACIQ,EAAAA,EAAAA,MAACV,EAAAA,EAAQ,CAACG,SAAS,uBAAsBD,SAAA,EACrCW,EAAAA,EAAAA,KAACwB,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,iBAAgBrC,UACvCQ,EAAAA,EAAAA,MAAC8B,EAAAA,GAAgB,CAAAtC,SAAA,EACbW,EAAAA,EAAAA,KAAC4B,EAAAA,GAAW,CAACZ,KAAK,OAAOH,KAAMA,EAAMgB,SAAUV,EAAcW,UAAQ,KACrE9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAe,CAAClB,KAAMA,EAAMG,KAAK,gBAAgBa,SAAUV,EAAcM,IAAK,MAC/EzB,EAAAA,EAAAA,KAACgC,EAAAA,GAAiB,CAAChB,KAAK,WAAWH,KAAMA,EAAMgB,SAAUV,UAGjEtB,EAAAA,EAAAA,MAACoC,EAAAA,GAAiB,CAAA5C,SAAA,EACdW,EAAAA,EAAAA,KAACkC,EAAAA,GAAa,CAACC,MAAM,OAAOpC,UAAU,OAAOE,QArB1CmC,MACXC,EAAAA,EAAAA,IAAexB,EAAME,IAEjBT,EADAF,GACSkC,EAAAA,EAAAA,IAAwBlC,EAAIS,EAAMJ,EAAYjB,IAE9C+C,EAAAA,EAAAA,IAAuB1B,EAAMJ,EAAYjB,GAE1D,EAc8EgB,QAASA,KAC3ER,EAAAA,EAAAA,KAACwC,EAAAA,GAAW,CAACL,MAAM,SAASlC,QAASA,IAAMT,EAAQI,kBAG5D,C","sources":["shared/Layout/FormPage.jsx","views/Settings/Agreement/AgreementCategories/AgreementCategoriesForm.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomTransition from '../Transitions/CustomTransition';\r\n\r\nexport default function FormPage({ children, backText, backTo }) {\r\n    const history = useHistory();\r\n\r\n    const onBack = () => {\r\n        if (backTo) {\r\n            history.replace(backTo);\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    };\r\n    return (\r\n        <CustomTransition>\r\n            {backText ? (\r\n                <div className=\"flex mb-3 text-dark-gray\">\r\n                    <i className=\"pi pi-angle-left text-2xl cursor-pointer\" onClick={onBack}></i>\r\n                    <div className=\" my-auto font-semibold text-lg cursor-pointer\" onClick={onBack}>\r\n                        Back to {backText}\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n            <>{children}</>\r\n        </CustomTransition>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { CustomChipInput, CustomInput, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addAgreementCategories, editAgreementCategories, getAgreementCategory } from '../../../../redux/actions/AgreementSettings/agreementCategories';\r\n\r\nconst AgreementCategoriesForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getAgreementCategory(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        subCategories: data.subCategories ?? [],\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        subCategories: [],\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editAgreementCategories(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addAgreementCategories(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Agreement Categories\">\r\n                <CustomCard col=\"12\" title=\"Add Agreements\">\r\n                    <CustomGridLayout>\r\n                        <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                        <CustomChipInput data={data} name=\"subCategories\" onChange={handleChange} col={12} />\r\n                        <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AgreementCategoriesForm;\r\n"],"names":["FormPage","_ref","children","backText","backTo","history","useHistory","onBack","replace","goBack","_jsxs","CustomTransition","className","_jsx","onClick","_Fragment","AgreementCategoriesForm","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","getAgreementCategory","data","_data$subCategories","setData","name","subCategories","isActive","handleChange","value","formErrors","formValidation","prev","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomChipInput","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","handleSave","showFormErrors","editAgreementCategories","addAgreementCategories","LightButton"],"sourceRoot":""}