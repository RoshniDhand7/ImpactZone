{"version":3,"file":"static/js/894.5b6bd630.chunk.js","mappings":"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","sources":["views/Settings/MembersSetup/MembershipTypes/MembershipTypeForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomFilterCard1, CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { CustomDropDown, CustomInput, CustomInputNumber, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport formValidation from '../../../../utils/validations';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SpecialRestrictionOptions, defaultDiscountOptions, yesNoOptions } from '../../../../utils/dropdownConstants';\r\nimport CustomPickList from '../../../../shared/Input/CustomPickList';\r\nimport { getClubs } from '../../../../redux/actions/BusinessSettings/clubsAction';\r\nimport CustomTable from '../../../../shared/Table/CustomTable';\r\nimport CustomDialog from '../../../../shared/Overlays/CustomDialog';\r\nimport { getCatalogItems } from '../../../../redux/actions/InventorySettings/catalogItemsAction';\r\nimport { confirmDelete, getIds, showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { getAccessSchedules } from '../../../../redux/actions/MembersSettings/accessSchedule';\r\nimport { addMembershipType, editMembershipType, getMembershipType } from '../../../../redux/actions/MembersSettings/membershipTypes';\r\n\r\nconst MembershipTypeForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        dispatch(getClubs());\r\n        dispatch(getCatalogItems());\r\n        dispatch(getAccessSchedules());\r\n    }, [dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        description: '',\r\n        discountType: 'None',\r\n        accessRestriction: 'false',\r\n        accessSchedule: null,\r\n        remotecheckin: '',\r\n        transferToAnotherType: null,\r\n        clubCreditAmount: '',\r\n        specialRestriction: '',\r\n        minimumAgeAllowed: 0,\r\n        maximumAgeAllowed: 0,\r\n        maximumDaysAllowed: 0,\r\n        maximumDistanceAllowed: 0,\r\n        club: [],\r\n        services: [],\r\n        isActive: true,\r\n    });\r\n\r\n    const { AccessScheduleDropdown } = useSelector((state) => state.accessSchedule);\r\n    let { MembershipTypesDropdown } = useSelector((state) => state.membershipTypes);\r\n    MembershipTypesDropdown = MembershipTypesDropdown?.filter((item) => item.name !== data?.name);\r\n    const { catalogServiceFilterItems } = useSelector((state) => state.catalogItems);\r\n\r\n    let { clubsDropdown } = useSelector((state) => state.clubs);\r\n    const [open, setOpen] = useState(false);\r\n    const [selected, setSelected] = useState([]);\r\n\r\n    const history = useHistory();\r\n\r\n    const { loading } = useSelector((state) => state?.loader?.isLoading);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getMembershipType(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        description: data.description,\r\n                        discountType: data.discountType,\r\n                        accessRestriction: data.accessRestriction,\r\n                        accessSchedule: data.accessSchedule,\r\n                        remotecheckin: data.remotecheckin,\r\n                        transferToAnotherType: data.transferToAnotherType,\r\n                        clubCreditAmount: data.clubCreditAmount,\r\n                        specialRestriction: data.specialRestriction,\r\n                        minimumAgeAllowed: data.minimumAgeAllowed,\r\n                        maximumAgeAllowed: data.maximumAgeAllowed,\r\n                        maximumDaysAllowed: data.maximumDaysAllowed,\r\n                        maximumDistanceAllowed: data.maximumDistanceAllowed,\r\n                        club: data.club,\r\n                        services: data.services,\r\n                        isActive: true,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            if (open) {\r\n                setSelected(data?.services);\r\n            }\r\n        }\r\n    }, [data?.services, open, id]);\r\n\r\n    const discountTypeOptions = defaultDiscountOptions;\r\n\r\n    const columns = [\r\n        { selectionMode: 'multiple', headerStyle: '' },\r\n        { field: 'name', header: 'Item Name' },\r\n        { field: 'upc', header: 'Item UPC' },\r\n        { field: 'unitPrice', header: 'Price' },\r\n    ];\r\n\r\n    const columns1 = [\r\n        { field: 'name', header: 'Item Name' },\r\n        { field: 'upc', header: 'Item UPC' },\r\n        { field: 'unitPrice', header: 'Price' },\r\n    ];\r\n\r\n    const handleServiceDelete = (col) => {\r\n        confirmDelete(\r\n            () => {\r\n                setData((prev) => ({ ...prev, services: data?.services?.filter((item) => item._id !== col?._id) }));\r\n            },\r\n            `Do you want to delete this Service ?`,\r\n            'center',\r\n        );\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setData((prev) => ({ ...prev, services: selected }));\r\n        setOpen(false);\r\n    };\r\n\r\n    const onSave = () => {\r\n        let ignore = [];\r\n        switch (data?.specialRestriction) {\r\n            case 'By Age':\r\n                ignore = ['maximumDaysAllowed', 'maximumDistanceAllowed', 'services'];\r\n                break;\r\n            case 'By Location':\r\n                ignore = ['minimumAgeAllowed', 'maximumAgeAllowed', 'maximumDaysAllowed', 'services'];\r\n                break;\r\n            case 'By Days':\r\n                ignore = ['maximumAgeAllowed', 'minimumAgeAllowed', 'maximumDistanceAllowed', 'services'];\r\n                break;\r\n            default:\r\n                ignore = ['maximumDaysAllowed', 'maximumDistanceAllowed', 'minimumAgeAllowed', 'maximumAgeAllowed', 'services'];\r\n                break;\r\n        }\r\n        if (showFormErrors(data, setData, ignore)) {\r\n            if (id) {\r\n                dispatch(editMembershipType(id, { ...data, services: getIds(data.services) }, history));\r\n            } else {\r\n                dispatch(addMembershipType({ ...data, services: getIds(data.services) }, () => history.goBack()));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Membership Types\">\r\n                <CustomCard col=\"12\" title=\"General\">\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                    <CustomGridLayout>\r\n                        <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                        <CustomInput name=\"description\" data={data} onChange={handleChange} />\r\n                        <CustomDropDown name=\"discountType\" options={discountTypeOptions} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"accessRestriction\" options={yesNoOptions} onChange={handleChange} data={data} />\r\n                        {data?.accessRestriction === 'true' && (\r\n                            <CustomDropDown name=\"accessSchedule\" options={AccessScheduleDropdown} onChange={handleChange} data={data} />\r\n                        )}\r\n                        <CustomDropDown name=\"remotecheckin\" options={yesNoOptions} onChange={handleChange} data={data} />\r\n                        <CustomDropDown name=\"transferToAnotherType\" options={MembershipTypesDropdown} onChange={handleChange} data={data} />\r\n                        <CustomInputNumber prefix=\"$\" name=\"clubCreditAmount\" data={data} onChange={handleChange} col=\"4\" />\r\n                        <CustomDropDown name=\"specialRestriction\" options={SpecialRestrictionOptions} onChange={handleChange} data={data} />\r\n                        {data?.specialRestriction === 'By Age' && (\r\n                            <>\r\n                                <CustomInputNumber name=\"minimumAgeAllowed\" data={data} onChange={handleChange} col=\"4\" />\r\n                                <CustomInputNumber name=\"maximumAgeAllowed\" data={data} onChange={handleChange} col=\"4\" />\r\n                            </>\r\n                        )}\r\n                        {data?.specialRestriction === 'By Location' && (\r\n                            <>\r\n                                <CustomInputNumber name=\"maximumDistanceAllowed\" data={data} onChange={handleChange} col=\"4\" />\r\n                            </>\r\n                        )}\r\n                        {data?.specialRestriction === 'By Days' && (\r\n                            <>\r\n                                <CustomInputNumber name=\"maximumDaysAllowed\" data={data} onChange={handleChange} col=\"4\" />\r\n                            </>\r\n                        )}\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard col=\"12\" title=\" Clubs\">\r\n                    <CustomPickList name=\"club\" selected={data?.club} sourceData={clubsDropdown} onPickListChange={handleChange} />\r\n                </CustomCard>\r\n                <CustomCard col=\"12\" title=\" Add Services\">\r\n                    <CustomFilterCard1 buttonTitle=\"Add\" onClick={() => setOpen(true)} extraClass=\"justify-content-end gap-2\">\r\n                        <div>\r\n                            <PrimaryButton\r\n                                label={'Remove All'}\r\n                                onClick={() => {\r\n                                    setData((prev) => ({ ...prev, services: [] }));\r\n                                    setSelected([]);\r\n                                    // dispatch(deleteUsageItem(id, 'paysTo'));\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </CustomFilterCard1>\r\n                    <CustomTable data={data?.services} columns={columns1} showSelectionElement={false} onDelete={handleServiceDelete} />\r\n                </CustomCard>\r\n                <CustomDialog\r\n                    title={'Add Services'}\r\n                    visible={open}\r\n                    onCancel={() => {\r\n                        setOpen('');\r\n                    }}\r\n                    loading={loading}\r\n                    onSave={handleSave}\r\n                    width=\"auto\"\r\n                >\r\n                    <CustomGridLayout>\r\n                        {open && (\r\n                            <CustomTable\r\n                                convertToboolean={false}\r\n                                data={open && catalogServiceFilterItems}\r\n                                columns={columns}\r\n                                selectedRow={selected}\r\n                                setSelectedRow={setSelected}\r\n                            />\r\n                        )}\r\n                    </CustomGridLayout>\r\n                </CustomDialog>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={onSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MembershipTypeForm;\r\n"],"names":["MembershipTypeForm","_MembershipTypesDropd","dispatch","useDispatch","id","useParams","useEffect","getClubs","getCatalogItems","getAccessSchedules","data","setData","useState","name","description","discountType","accessRestriction","accessSchedule","remotecheckin","transferToAnotherType","clubCreditAmount","specialRestriction","minimumAgeAllowed","maximumAgeAllowed","maximumDaysAllowed","maximumDistanceAllowed","club","services","isActive","AccessScheduleDropdown","useSelector","state","MembershipTypesDropdown","membershipTypes","filter","item","catalogServiceFilterItems","catalogItems","clubsDropdown","clubs","open","setOpen","selected","setSelected","history","useHistory","loading","_state$loader","loader","isLoading","getMembershipType","handleChange","_ref","value","formErrors","formValidation","prev","discountTypeOptions","defaultDiscountOptions","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomCard","col","title","CustomInputSwitch","onChange","CustomGridLayout","CustomInput","required","CustomDropDown","options","yesNoOptions","CustomInputNumber","prefix","SpecialRestrictionOptions","CustomPickList","sourceData","onPickListChange","CustomFilterCard1","buttonTitle","onClick","extraClass","PrimaryButton","label","CustomTable","columns","field","header","showSelectionElement","onDelete","confirmDelete","_data$services","_id","CustomDialog","visible","onCancel","onSave","handleSave","width","convertToboolean","selectionMode","headerStyle","selectedRow","setSelectedRow","CustomButtonGroup","className","ignore","showFormErrors","editMembershipType","getIds","addMembershipType","goBack","LightButton"],"sourceRoot":""}