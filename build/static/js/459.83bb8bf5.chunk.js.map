{"version":3,"file":"static/js/459.83bb8bf5.chunk.js","mappings":"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","sources":["views/Settings/PointOfSale/Tax/TaxForm.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { CustomDropDown, CustomInput, CustomInputNumber, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { TaxRateTypeOptions } from '../../../../utils/dropdownConstants';\r\nimport CustomPickList from '../../../../shared/Input/CustomPickList';\r\nimport { addTax, editTax, getTax, getTaxes } from '../../../../redux/actions/PosSettings/tax';\r\nimport useGetClubs from '../../../../hooks/useGetClubs';\r\n\r\nconst TaxForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        dispatch(getTaxes());\r\n    }, [dispatch]);\r\n    const { clubsDropdown } = useGetClubs();\r\n\r\n    const { allTaxDropdown } = useSelector((state) => state.taxes);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getTax(id, (data) => {\r\n                    setData({\r\n                        taxRateName: data.taxRateName,\r\n                        taxRatePercentage: data.taxRatePercentage,\r\n                        availableTaxRate: data.availableTaxRate,\r\n                        taxRateType: data.taxRateType,\r\n                        club: data.club,\r\n                        isActive: data.isActive,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        taxRateName: '',\r\n        taxRatePercentage: 0,\r\n        availableTaxRate: null,\r\n        taxRateType: '',\r\n        club: '',\r\n        isActive: true,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editTax(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addTax(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Tax\">\r\n                <CustomCard col=\"12\" title=\"General\">\r\n                    <CustomGridLayout>\r\n                        <CustomInput name=\"taxRateName\" data={data} onChange={handleChange} required />\r\n                        <CustomInputNumber\r\n                            name=\"taxRatePercentage\"\r\n                            data={data}\r\n                            onChange={handleChange}\r\n                            required\r\n                            col=\"4\"\r\n                            minFractionDigits={4}\r\n                            maxFractionDigits={4}\r\n                        />\r\n                        <CustomDropDown name=\"availableTaxRate\" options={allTaxDropdown} data={data} onChange={handleChange} optionLabel=\"name\" />\r\n                        <CustomDropDown name=\"taxRateType\" options={TaxRateTypeOptions} data={data} onChange={handleChange} required />\r\n                        <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomCard col=\"12\" title=\"Clubs\">\r\n                    <CustomPickList name=\"club\" selected={data?.club} sourceData={clubsDropdown} onPickListChange={handleChange} data={data} />\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaxForm;\r\n"],"names":["TaxForm","history","useHistory","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","getTaxes","clubsDropdown","useGetClubs","allTaxDropdown","useSelector","state","taxes","getTax","data","setData","taxRateName","taxRatePercentage","availableTaxRate","taxRateType","club","isActive","handleChange","_ref","name","value","formErrors","formValidation","prev","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomInputNumber","minFractionDigits","maxFractionDigits","CustomDropDown","options","optionLabel","TaxRateTypeOptions","CustomInputSwitch","CustomPickList","selected","sourceData","onPickListChange","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editTax","addTax","LightButton","goBack"],"sourceRoot":""}