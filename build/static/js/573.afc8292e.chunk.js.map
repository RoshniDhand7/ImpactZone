{"version":3,"file":"static/js/573.afc8292e.chunk.js","mappings":"mRAYA,MAqDA,EArDyBA,KACrB,MAAMC,GAAUC,EAAAA,EAAAA,OACV,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IACvCC,EAAAA,EAAAA,YAAU,KACFP,GACAE,GACIM,EAAAA,EAAAA,IAAgBR,GAAKS,IACjBC,EAAQ,CACJC,KAAMF,EAAKE,KACXC,iBAAkBH,EAAKG,iBAAiBC,YAC1C,IAGd,GACD,CAACb,EAAIE,IACR,MAAOO,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,CAC7BK,KAAM,GACNC,iBAAkB,UAEhBE,EAAeC,IAAsB,IAArB,KAAEJ,EAAI,MAAEK,GAAOD,EACjC,MAAME,GAAaC,EAAAA,EAAAA,GAAeP,EAAMK,EAAOP,GAC/CC,GAASS,IAAI,IAAWA,EAAM,CAACR,GAAOK,EAAOC,gBAAc,EAW/D,OACIG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,SAAS,gBAAeH,SAAA,EAC9BF,EAAAA,EAAAA,KAACM,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,oBAAmBN,UAC1CC,EAAAA,EAAAA,MAACM,EAAAA,EAAgB,CAAAP,SAAA,EACbF,EAAAA,EAAAA,KAACU,EAAAA,GAAW,CAACnB,KAAK,OAAOF,KAAMA,EAAMsB,SAAUjB,EAAckB,UAAQ,KACrEZ,EAAAA,EAAAA,KAACa,EAAAA,GAAc,CAACtB,KAAK,mBAAmBuB,QAASC,EAAAA,GAAc1B,KAAMA,EAAMsB,SAAUjB,UAI7FS,EAAAA,EAAAA,MAACa,EAAAA,GAAiB,CAAAd,SAAA,EACdF,EAAAA,EAAAA,KAACiB,EAAAA,GAAa,CAACC,MAAM,OAAOC,UAAU,OAAOC,QApB1CC,MACXC,EAAAA,EAAAA,IAAejC,EAAMC,IAEjBR,EADAF,GACS2C,EAAAA,EAAAA,IAAiB3C,EAAIS,EAAMJ,EAAYP,IAEvC8C,EAAAA,EAAAA,IAAgBnC,EAAMJ,EAAYP,GAEnD,EAa8EM,QAASA,KAC3EgB,EAAAA,EAAAA,KAACyB,EAAAA,GAAW,CAACP,MAAM,SAASE,QAASA,IAAM1C,EAAQgD,kBAG5D,C","sources":["views/Settings/ScheduleSetup/LocationType/LocationTypeForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addLocationType, editLocationType, getLocationType } from '../../../../redux/actions/ScheduleSettings/locationTypeActions';\r\nimport { yesNoOptions } from '../../../../utils/dropdownConstants';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport formValidation from '../../../../utils/validations';\r\n\r\nconst LocationTypeForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getLocationType(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        allowOverbooking: data.allowOverbooking.toString(),\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        allowOverbooking: 'false',\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editLocationType(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addLocationType(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Location Type\">\r\n                <CustomCard col=\"12\" title=\"Add Location Type\">\r\n                    <CustomGridLayout>\r\n                        <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                        <CustomDropDown name=\"allowOverbooking\" options={yesNoOptions} data={data} onChange={handleChange} />\r\n                        {/* <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} /> */}\r\n                    </CustomGridLayout>\r\n                </CustomCard>\r\n                <CustomButtonGroup>\r\n                    <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                    <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n                </CustomButtonGroup>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LocationTypeForm;\r\n"],"names":["LocationTypeForm","history","useHistory","id","useParams","dispatch","useDispatch","loading","setLoading","useState","useEffect","getLocationType","data","setData","name","allowOverbooking","toString","handleChange","_ref","value","formErrors","formValidation","prev","_jsx","_Fragment","children","_jsxs","FormPage","backText","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","yesNoOptions","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editLocationType","addLocationType","LightButton","goBack"],"sourceRoot":""}