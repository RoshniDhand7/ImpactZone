{"version":3,"file":"static/js/492.5a9328a6.chunk.js","mappings":"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","sources":["views/More/Members/Reserve/Reserve.jsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\r\nimport useMembers from '../../../../hooks/Members/useMembers';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLocations } from '../../../../redux/actions/Settings/ScheduleSetup/locationsActions';\r\nimport useFilters from '../../../../hooks/useFilters';\r\nimport { getResourceTypes } from '../../../../redux/actions/Settings/MembershipSetup/resourceTypeAction';\r\nimport { getResourcesList, resourceReserve, resourceReturn } from '../../../../redux/actions/CheckIn/CheckIn';\r\nimport formValidation from '../../../../utils/validations';\r\nimport PrimaryButton from '../../../../shared/Button/CustomButton';\r\nimport CustomCard, { CustomFilterCard, CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport { CustomAsyncReactSelect, CustomCalenderInput, CustomDropDown } from '../../../../shared/Input/AllInputs';\r\nimport CustomTable from '../../../../shared/Table/CustomTable';\r\nimport FilterComponent from '../../../../components/FilterComponent';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\n\r\nconst Reserve = () => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState({\r\n        reserveMember: '',\r\n        reserveDate: new Date(),\r\n    });\r\n    const { members } = useMembers();\r\n\r\n    useEffect(() => {\r\n        setData((prev) => ({ ...prev, reserveMember: members[0]?._id }));\r\n    }, [members]);\r\n\r\n    const suggestions = useMemo(\r\n        () =>\r\n            members.map((item) => ({\r\n                value: item._id,\r\n                name: `${item.firstName} ${item.MI} ${item.lastName}`,\r\n            })),\r\n        [members],\r\n    );\r\n    const memberOptions = useMemo(() => members?.map((item) => ({ name: `${item.firstName} ${item.MI} ${item.lastName}`, value: item?._id })), [members]);\r\n\r\n    const [filteredData, setFilteredData] = useState({\r\n        filterType: 'AND',\r\n        location: '',\r\n        resourceType: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(getResourceTypes());\r\n        dispatch(getLocations());\r\n    }, [dispatch]);\r\n    useEffect(() => {\r\n        if (data?.reserveMember && data?.reserveDate) {\r\n            dispatch(getResourcesList(data));\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [data?.reserveMember, data?.reserveDate]);\r\n    const { resourceList } = useSelector((state) => state.checkin);\r\n\r\n    const { tableData, onFilterOpen, onFilterClose, onApplyFilters, filters, isFilterVisible } = useFilters(resourceList);\r\n    const { locationDropdown } = useSelector((state) => state.settings.schedule);\r\n    const { resourceTypeDropdown } = useSelector((state) => state.settings.members);\r\n\r\n    const pastDueTemplate = (r) => {\r\n        const now = new Date();\r\n        const createdAt = new Date(r?.createdAt);\r\n        const diffInMs = now - createdAt;\r\n\r\n        const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\r\n\r\n        return (\r\n            <div\r\n                className={`${diffInHours > r.pastDue ? 'h-1rem w-2 border-circle bg-red-500 inline-block' : 'h-1rem w-2 border-circle bg-green-500 inline-block'}`}\r\n            ></div>\r\n        );\r\n    };\r\n\r\n    const handleReserveReturn = (r) => {\r\n        if (r?.isBookedForMember) {\r\n            dispatch(resourceReturn(data, r?.reserveId, () => dispatch(getResourcesList(data))));\r\n        } else {\r\n            dispatch(resourceReserve(r?._id, data, () => dispatch(getResourcesList(data))));\r\n        }\r\n    };\r\n\r\n    const reserveColumn = [\r\n        { field: 'name', header: 'Resource' },\r\n        { field: 'resourceType', header: 'Resource Type' },\r\n        { field: 'location', header: 'Location' },\r\n        {\r\n            field: '',\r\n            body: (r) => `${r?.reserveCount}/${r?.availableQuantity}`,\r\n            header: 'Resources Available',\r\n        },\r\n        { field: '', body: pastDueTemplate, header: 'Past Due' },\r\n        { field: 'serviceCount', header: 'Services Available' },\r\n    ];\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n\r\n    const filterhandleChange = ({ name, value }) => {\r\n        setFilteredData((prev) => ({ ...prev, [name]: value }));\r\n    };\r\n    const customActionTemplate = (r) => {\r\n        return <PrimaryButton name=\"status\" label={r?.isBookedForMember ? 'Return' : 'Reserve'} onClick={() => handleReserveReturn(r)} />;\r\n    };\r\n    return (\r\n        <>\r\n            <FormPage backText=\"Members\">\r\n                <CustomCard title=\"Reserve\" col=\"12\">\r\n                    <CustomFilterCard contentPosition=\"end m-0\">\r\n                        <PrimaryButton label=\"Filters\" icon=\"pi pi-filters\" onClick={onFilterOpen} className=\"mx-2\" />\r\n                    </CustomFilterCard>\r\n                    <CustomGridLayout>\r\n                        <div className=\"col-6 \">\r\n                            <label className=\" ml-1 mb-3\">Member</label>\r\n                            <CustomAsyncReactSelect\r\n                                name=\"reserveMember\"\r\n                                suggestions={suggestions}\r\n                                options={memberOptions}\r\n                                placeholder=\"Search Member\"\r\n                                showLabel={false}\r\n                                value={data.reserveMember}\r\n                                onChange={handleChange}\r\n                                col={12}\r\n                            />\r\n                        </div>\r\n\r\n                        <CustomCalenderInput label=\"Date\" name=\"reserveDate\" data={data} onChange={handleChange} col={6} extraClassName={'mb-2'} />\r\n                    </CustomGridLayout>\r\n                    <CustomTable convertToboolean={false} data={tableData} columns={reserveColumn} customActionTemplate={customActionTemplate} />\r\n                    <FilterComponent\r\n                        value={filters}\r\n                        onApply={onApplyFilters}\r\n                        visible={isFilterVisible}\r\n                        onHide={onFilterClose}\r\n                        data={filteredData}\r\n                        handleChange={filterhandleChange}\r\n                        setData={setFilteredData}\r\n                    >\r\n                        <CustomGridLayout>\r\n                            <CustomDropDown\r\n                                name=\"resourceType\"\r\n                                options={resourceTypeDropdown?.map((item) => ({ name: item.name, value: item.name }))}\r\n                                data={filteredData}\r\n                                onChange={filterhandleChange}\r\n                                col={12}\r\n                            />\r\n                            <CustomDropDown\r\n                                name=\"location\"\r\n                                options={locationDropdown?.map((item) => ({ name: item.name, value: item.name }))}\r\n                                data={filteredData}\r\n                                onChange={filterhandleChange}\r\n                                col={12}\r\n                            />\r\n                        </CustomGridLayout>\r\n                    </FilterComponent>\r\n                </CustomCard>\r\n            </FormPage>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Reserve;\r\n"],"names":["Reserve","dispatch","useDispatch","data","setData","useState","reserveMember","reserveDate","Date","members","useMembers","useEffect","prev","_members$","_id","suggestions","useMemo","map","item","value","name","concat","firstName","MI","lastName","memberOptions","filteredData","setFilteredData","filterType","location","resourceType","getResourceTypes","getLocations","getResourcesList","resourceList","useSelector","state","checkin","tableData","onFilterOpen","onFilterClose","onApplyFilters","filters","isFilterVisible","useFilters","locationDropdown","settings","schedule","resourceTypeDropdown","reserveColumn","field","header","body","r","reserveCount","availableQuantity","diffInMs","createdAt","diffInHours","Math","floor","_jsx","className","pastDue","handleChange","_ref","formErrors","formValidation","filterhandleChange","_ref2","_Fragment","children","FormPage","backText","_jsxs","CustomCard","title","col","CustomFilterCard","contentPosition","PrimaryButton","label","icon","onClick","CustomGridLayout","CustomAsyncReactSelect","options","placeholder","showLabel","onChange","CustomCalenderInput","extraClassName","CustomTable","convertToboolean","columns","customActionTemplate","isBookedForMember","resourceReturn","reserveId","resourceReserve","handleReserveReturn","FilterComponent","onApply","visible","onHide","CustomDropDown"],"sourceRoot":""}