{"version":3,"file":"static/js/301.d97c5741.chunk.js","mappings":"wSAcA,MA8EA,EA9EuBA,KAAO,IAADC,EACzB,MAAMC,GAAUC,EAAAA,EAAAA,OACV,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACX,iBAAEC,IAAqBC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,YAE1DC,EAAAA,EAAAA,YAAU,KACNN,GAASO,EAAAA,EAAAA,MAAkB,GAC5B,CAACP,IAEJ,IAAI,sBAAEQ,IAA0BL,EAAAA,EAAAA,KAAaC,GAAUA,EAAMK,eAC7DD,EAA6C,QAAxBb,EAAGa,SAAqB,IAAAb,OAAA,EAArBA,EAAuBe,KAAKC,IAAI,CAAQC,MAAOD,EAAKE,IAAKC,KAAMH,EAAKG,SAE5F,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IACvCX,EAAAA,EAAAA,YAAU,KACFR,GACAE,GACIkB,EAAAA,EAAAA,IAAYpB,GAAKqB,IACbC,EAAQ,CACJN,KAAMK,EAAKL,KACXO,aAAcF,EAAKE,aACnBC,eAAgBH,EAAKG,eACrBC,kBAAmBJ,EAAKI,kBACxBC,YAAaL,EAAKK,YAClBC,SAAUN,EAAKM,SACfC,QAASP,EAAKO,SAChB,IAGd,GACD,CAAC5B,EAAIE,IACR,MAAOmB,EAAMC,IAAWH,EAAAA,EAAAA,UAAS,CAC7BH,KAAM,GACNO,cAAc,EACdC,eAAgB,GAChBC,kBAAmB,GACnBC,YAAa,GACbC,UAAU,EACVC,QAAS,KAEPC,EAAeC,IAAsB,IAArB,KAAEd,EAAI,MAAEF,GAAOgB,EACjC,MAAMC,GAAaC,EAAAA,EAAAA,GAAehB,EAAMF,EAAOO,GAC/CC,GAASW,IAAI,IAAWA,EAAM,CAACjB,GAAOF,EAAOiB,gBAAc,EAY/D,OACIG,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,SAAS,aAAYC,SAAA,EAC3BC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,iBAAgBJ,UACvCH,EAAAA,EAAAA,MAACQ,EAAAA,EAAgB,CAAAL,SAAA,EACbC,EAAAA,EAAAA,KAACK,EAAAA,GAAW,CAAC3B,KAAK,OAAOK,KAAMA,EAAMuB,SAAUf,EAAcgB,UAAQ,KACrEP,EAAAA,EAAAA,KAACQ,EAAAA,GAAc,CAAC9B,KAAK,eAAe+B,MAAM,iBAAiBC,QAASC,EAAAA,GAAc5B,KAAMA,EAAMuB,SAAUf,KACxGS,EAAAA,EAAAA,KAACK,EAAAA,GAAW,CAACI,MAAM,mBAAmB/B,KAAK,iBAAiBK,KAAMA,EAAMuB,SAAUf,KAClFS,EAAAA,EAAAA,KAACQ,EAAAA,GAAc,CAAC9B,KAAK,oBAAoBgC,QAAS5C,EAAkBiB,KAAMA,EAAMuB,SAAUf,KAC1FS,EAAAA,EAAAA,KAACY,EAAAA,GAAc,CAAClC,KAAK,cAAcmC,UAAU,MAAM9B,KAAMA,EAAMuB,SAAUf,KACzES,EAAAA,EAAAA,KAACc,EAAAA,GAAiB,CAACpC,KAAK,WAAWK,KAAMA,EAAMuB,SAAUf,UAGjES,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,IAAI,KAAKC,MAAM,gBAAeJ,UACtCC,EAAAA,EAAAA,KAACe,EAAAA,EAAc,CAACrC,KAAK,UAAUsC,SAAc,OAAJjC,QAAI,IAAJA,OAAI,EAAJA,EAAMO,QAAS2B,WAAY7C,EAAuB8C,iBAAkB3B,OAGjHK,EAAAA,EAAAA,MAACuB,EAAAA,GAAiB,CAAApB,SAAA,EACdC,EAAAA,EAAAA,KAACoB,EAAAA,GAAa,CAACX,MAAM,OAAOY,UAAU,OAAOC,QA3BtCC,MACXC,EAAAA,EAAAA,IAAezC,EAAMC,IAEjBpB,EADAF,GACS+D,EAAAA,EAAAA,IAAa/D,EAAIqB,EAAMH,EAAYpB,IAEnCkE,EAAAA,EAAAA,IAAY3C,EAAMH,EAAYpB,GAE/C,EAoB0EmB,QAASA,KAC3EqB,EAAAA,EAAAA,KAAC2B,EAAAA,GAAW,CAAClB,MAAM,SAASa,QAASA,IAAM9D,EAAQoE,gBAEhD,C","sources":["views/Settings/Inventory/Categories/CategoriesForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputSwitch, CustomTextArea } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addCategory, editCategory, getCategory } from '../../../../redux/actions/InventorySettings/categoriesAction';\r\nimport { yesNoOptions } from '../../../../utils/dropdownConstants';\r\nimport { getCatalogItems } from '../../../../redux/actions/InventorySettings/catalogItemsAction';\r\nimport CustomPickList from '../../../../shared/Input/CustomPickList';\r\n\r\nconst CategoriesForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const { categoryDropdown } = useSelector((state) => state.category);\r\n\r\n    useEffect(() => {\r\n        dispatch(getCatalogItems());\r\n    }, [dispatch]);\r\n\r\n    let { allCatalogItemsFilter } = useSelector((state) => state.catalogItems);\r\n    allCatalogItemsFilter = allCatalogItemsFilter?.map((item) => ({ value: item._id, name: item.name }));\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getCategory(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        displayInPos: data.displayInPos,\r\n                        posButtonLabel: data.posButtonLabel,\r\n                        availableCategory: data.availableCategory,\r\n                        description: data.description,\r\n                        isActive: data.isActive,\r\n                        catalog: data.catalog,\r\n                    });\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        displayInPos: false,\r\n        posButtonLabel: '',\r\n        availableCategory: '',\r\n        description: '',\r\n        isActive: true,\r\n        catalog: [],\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation(name, value, data);\r\n        setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n    };\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData)) {\r\n            if (id) {\r\n                dispatch(editCategory(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addCategory(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormPage backText=\"Categories\">\r\n            <CustomCard col=\"12\" title=\"Add Categories\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomDropDown name=\"displayInPos\" label=\"Display In POS\" options={yesNoOptions} data={data} onChange={handleChange} />\r\n                    <CustomInput label=\"POS Button Label\" name=\"posButtonLabel\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"availableCategory\" options={categoryDropdown} data={data} onChange={handleChange} />\r\n                    <CustomTextArea name=\"description\" maxLength=\"266\" data={data} onChange={handleChange} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomCard col=\"12\" title=\"Catalog Items\">\r\n                <CustomPickList name=\"catalog\" selected={data?.catalog} sourceData={allCatalogItemsFilter} onPickListChange={handleChange} />\r\n            </CustomCard>\r\n\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default CategoriesForm;\r\n"],"names":["CategoriesForm","_allCatalogItemsFilte","history","useHistory","id","useParams","dispatch","useDispatch","categoryDropdown","useSelector","state","category","useEffect","getCatalogItems","allCatalogItemsFilter","catalogItems","map","item","value","_id","name","loading","setLoading","useState","getCategory","data","setData","displayInPos","posButtonLabel","availableCategory","description","isActive","catalog","handleChange","_ref","formErrors","formValidation","prev","_jsxs","FormPage","backText","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","label","options","yesNoOptions","CustomTextArea","maxLength","CustomInputSwitch","CustomPickList","selected","sourceData","onPickListChange","CustomButtonGroup","PrimaryButton","className","onClick","handleSave","showFormErrors","editCategory","addCategory","LightButton","goBack"],"sourceRoot":""}