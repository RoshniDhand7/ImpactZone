{"version":3,"file":"static/js/278.dcd30e16.chunk.js","mappings":"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","sources":["views/Settings/Inventory/Vendors/VendorForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CustomDropDown, CustomInput, CustomInputMask, CustomInputSwitch } from '../../../../shared/Input/AllInputs';\r\nimport FormPage from '../../../../shared/Layout/FormPage';\r\nimport CustomCard, { CustomGridLayout } from '../../../../shared/Cards/CustomCard';\r\nimport PrimaryButton, { CustomButtonGroup, LightButton } from '../../../../shared/Button/CustomButton';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport formValidation from '../../../../utils/validations';\r\nimport { getCitiesByState, getStatesByCountry, showFormErrors } from '../../../../utils/commonFunctions';\r\nimport { addVendors, editVendors, getVendor } from '../../../../redux/actions/InventorySettings/vendorsAction';\r\n\r\nconst VendorForm = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [states, setStates] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        const updatedStates = getStatesByCountry('US');\r\n        setStates(updatedStates);\r\n    }, [dispatch]);\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(\r\n                getVendor(id, (data) => {\r\n                    setData({\r\n                        name: data.name,\r\n                        email: data.email,\r\n                        phone: data.phone,\r\n                        address1: data.address1,\r\n                        address2: data.address2,\r\n                        city: data.city,\r\n                        state: data.state,\r\n                        zipCode: data.zipCode,\r\n                        alternateVendors: data.alternateVendors,\r\n                        isActive: data.isActive,\r\n                    });\r\n                    const cities = getCitiesByState('US', data.state);\r\n                    setCities(cities);\r\n                }),\r\n            );\r\n        }\r\n    }, [id, dispatch]);\r\n    const { vendorsDropdown } = useSelector((state) => state.vendors);\r\n\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        address1: '',\r\n        address2: '',\r\n        city: '',\r\n        state: '',\r\n        zipCode: '',\r\n        alternateVendors: '',\r\n        isActive: false,\r\n    });\r\n    const handleChange = ({ name, value }) => {\r\n        const formErrors = formValidation('name', value, data);\r\n\r\n        if (name === 'state') {\r\n            const city = getCitiesByState('US', value);\r\n            setCities(city);\r\n            setData((prev) => ({ ...prev, [name]: value, city: '' }));\r\n        } else if (name === 'name') {\r\n            setData((prev) => ({ ...prev, [name]: value, formErrors }));\r\n        } else {\r\n            setData((prev) => ({ ...prev, [name]: value, formErrors: {} }));\r\n        }\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (showFormErrors(data, setData, ['zipCode', 'address1', 'address2', 'state', 'city', 'phone', 'email'])) {\r\n            if (id) {\r\n                dispatch(editVendors(id, data, setLoading, history));\r\n            } else {\r\n                dispatch(addVendors(data, setLoading, history));\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormPage backText=\"Vendor\">\r\n            <CustomCard col=\"12\" title=\"Add Vendor\">\r\n                <CustomGridLayout>\r\n                    <CustomInput name=\"name\" data={data} onChange={handleChange} required />\r\n                    <CustomInput name=\"address1\" data={data} onChange={handleChange} />\r\n                    <CustomInput name=\"address2\" data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"state\" options={states} data={data} onChange={handleChange} />\r\n                    <CustomDropDown name=\"city\" options={cities} data={data} onChange={handleChange} />\r\n                    <CustomInput name=\"zipCode\" data={data} onChange={handleChange} disabled={!data.state} />\r\n                    <CustomInputMask name=\"phone\" id=\"phone\" mask=\"(999) 999-9999\" data={data} placeholder=\"\" onChange={handleChange} />\r\n                    <CustomInput data={data} name=\"email\" onChange={handleChange} />\r\n                    <CustomDropDown name=\"alternateVendors\" options={vendorsDropdown} data={data} onChange={handleChange} />\r\n                    <CustomInputSwitch name=\"isActive\" data={data} onChange={handleChange} />\r\n                </CustomGridLayout>\r\n            </CustomCard>\r\n            <CustomButtonGroup>\r\n                <PrimaryButton label=\"Save\" className=\"mx-2\" onClick={handleSave} loading={loading} />\r\n                <LightButton label=\"Cancel\" onClick={() => history.goBack()} />\r\n            </CustomButtonGroup>\r\n        </FormPage>\r\n    );\r\n};\r\n\r\nexport default VendorForm;\r\n"],"names":["VendorForm","history","useHistory","id","useParams","dispatch","useDispatch","states","setStates","useState","cities","setCities","loading","setLoading","useEffect","updatedStates","getStatesByCountry","getVendor","data","setData","name","email","phone","address1","address2","city","state","zipCode","alternateVendors","isActive","getCitiesByState","vendorsDropdown","useSelector","vendors","handleChange","_ref","value","formErrors","formValidation","prev","_jsxs","FormPage","backText","children","_jsx","CustomCard","col","title","CustomGridLayout","CustomInput","onChange","required","CustomDropDown","options","disabled","CustomInputMask","mask","placeholder","CustomInputSwitch","CustomButtonGroup","PrimaryButton","label","className","onClick","handleSave","showFormErrors","editVendors","addVendors","LightButton","goBack"],"sourceRoot":""}